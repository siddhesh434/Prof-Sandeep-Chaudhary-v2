<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Chapter Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-primary': '#3B82F6',
                        'brand-secondary': '#10B981',
                    }
                }
            }
        }
    </script>
</head>

<body class="bg-gray-100">
    <div class="flex h-screen overflow-hidden relative">
        <!-- Sidebar - hidden on mobile by default -->
        <aside id="sidebar"
            class="w-64 bg-blue-900 text-white shadow-lg transition-all duration-300 ease-in-out z-40 fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 md:relative md:block">
            <div class="p-6 border-b border-blue-800">
                <h2 class="text-xl font-bold tracking-wide">Welcome, admin123!</h2>
                <!-- Close button for mobile -->
                <button id="close-sidebar" class="absolute top-4 right-4 text-white md:hidden">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <nav class="mt-4">
                <ul>
                    <li class="mb-1 px-2">
                        <a href="/admin"
                            class="flex items-center py-3 px-4 bg-blue-700 text-white rounded-md font-medium">
                            <i class="fas fa-home mr-3"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li class="mb-1 px-2">
                        <a href="/admin/control.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-sliders-h mr-3"></i>
                          <span>Visibility Controls</span>
                        </a>
                      </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/files.html"
                          class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-users mr-3"></i>
                          <span>File Upload</span>
                        </a>
                      </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/eResources.html"
                          class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-file-alt mr-3"></i>
                          <span>e-Resources</span>
                        </a>
                      </li>
                       <li class="mb-1 px-2">
            <a href="/admin/latest_news.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-edit mr-3"></i>
              <span>Latest News & Scrolling</span>
            </a>
          </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/formData" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-ticket-alt mr-3"></i>
                          <span>User Requests</span>
                        </a>
                      </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/cvGenerator.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-file-pdf mr-3"></i>
                          <span>CV Generator</span>
                        </a>
                      </li>
                      <br>
                      <li style="padding-left: 13px; font-size: medium; font-size: 1.1rem;">Account</li>
                    <li class="mb-1 px-2">
                        <a href="/admin/logout"
                            class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                            <i class="fas fa-sign-out-alt mr-3"></i>
                            <span>Logout</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Overlay for mobile sidebar -->
        <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>

        <!-- Main Content -->
        <main class="flex-1 overflow-y-auto">
            <div class="p-4 md:p-6">
                <!-- Header with mobile menu indicator -->
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center">
                        <button id="mobile-menu-button" class="mr-3 text-gray-700 md:hidden">
                            <i class="fas fa-bars text-xl"></i>
                        </button>
                        <h1 class="text-xl md:text-2xl font-bold text-gray-800">Book Chapter Management</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <span class="text-gray-700 text-sm md:text-base hidden sm:inline">Welcome, Admin</span>
                        <div
                            class="w-8 h-8 md:w-10 md:h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-800 font-semibold">
                            A
                        </div>
                    </div>
                </div>

                <!-- Chapter Count Card -->
                <div class="bg-gradient-to-r from-brand-secondary to-blue-700 text-white rounded-lg shadow-md p-4 mb-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-lg font-semibold">Total Book Chapters</h2>
                            <p class="text-sm opacity-80">Manage all your book chapters in one place</p>
                        </div>
                        <div class="text-3xl font-bold flex items-center">
                            <span id="chapterCount">0</span>
                            <i class="fas fa-book-open ml-3 text-2xl"></i>
                        </div>
                    </div>
                </div>

                <!-- Book Chapter Form -->
                <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
                    <form id="chapterForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <input type="hidden" id="chapterId">

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="author">Authors</label>
                            <input type="text" id="author" name="author" required
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                                placeholder="Lastname, F.N. et al.">
                        </div>

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="chapterName">Chapter Name</label>
                            <input type="text" id="chapterName" name="chapterName" required
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        </div>

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="bookName">Book Name</label>
                            <input type="text" id="bookName" name="bookName" required
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        </div>

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="year">Publication Year</label>
                            <input type="number" id="year" name="year" required min="1900" max="2100"
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        </div>

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="isbn">ISBN</label>
                            <input type="text" id="isbn" name="isbn"
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                                placeholder="978-XXX-XXX-XXX-X">
                        </div>

                        <div class="flex flex-col">
                            <label class="mb-2 text-gray-700" for="pages">Page Range</label>
                            <input type="text" id="pages" name="pages"
                                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                                placeholder="e.g., 193-205">
                        </div>

                        <div class="col-span-1 md:col-span-2 flex space-x-4">
                            <button type="submit" id="addButton"
                                class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300">
                                <i class="fas fa-plus mr-2"></i> Add Chapter
                            </button>
                            <button type="button" id="updateButton"
                                class="flex-1 bg-yellow-500 text-white p-3 rounded hover:bg-yellow-600 transition duration-300 hidden">
                                <i class="fas fa-edit mr-2"></i> Update Chapter
                            </button>
                            <button type="button" id="cancelEditButton"
                                class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden">
                                <i class="fas fa-times mr-2"></i> Cancel
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Search and Filter Section -->
                <div class="mb-6 flex flex-wrap gap-4 bg-white p-4 rounded-lg shadow-md">
                    <input type="text" id="searchInput" placeholder="Search book chapters..."
                        class="flex-grow border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    <select id="yearFilter"
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        <option value="">All Years</option>
                    </select>
                    <button id="searchButton"
                        class="bg-brand-secondary text-white p-2 rounded hover:bg-blue-700 transition duration-300 flex items-center">
                        <i class="fas fa-search mr-2"></i> Search
                    </button>
                </div>

                <!-- Book Chapters Grid -->
                <div id="chaptersGrid"
                    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
                    <!-- Book chapters will be dynamically added here -->
                </div>
            </div>
        </main>
    </div>

    <!-- Floating action button for mobile -->
    <button id="mobile-fab"
        class="md:hidden fixed bottom-4 right-4 bg-brand-primary text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-30">
        <i class="fas fa-plus"></i>
    </button>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
        <div class="bg-white rounded-lg p-6 max-w-sm w-full">
            <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
            <p class="mb-6 text-gray-600">Are you sure you want to delete this book chapter?</p>
            <div class="flex space-x-4">
                <button id="confirmDeleteBtn"
                    class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300">
                    <i class="fas fa-trash-alt mr-2"></i> Delete
                </button>
                <button id="cancelDeleteBtn"
                    class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300">
                    <i class="fas fa-ban mr-2"></i> Cancel
                </button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const form = document.getElementById('chapterForm');
        const chaptersGrid = document.getElementById('chaptersGrid');
        const addButton = document.getElementById('addButton');
        const updateButton = document.getElementById('updateButton');
        const cancelEditButton = document.getElementById('cancelEditButton');
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const searchInput = document.getElementById('searchInput');
        const yearFilter = document.getElementById('yearFilter');
        const searchButton = document.getElementById('searchButton');
        const chapterCount = document.getElementById('chapterCount');

        // Mobile menu elements
        const mobileMenuButton = document.getElementById("mobile-menu-button");
        const closeSidebarButton = document.getElementById("close-sidebar");
        const sidebar = document.getElementById("sidebar");
        const sidebarOverlay = document.getElementById("sidebar-overlay");
        const mobileFab = document.getElementById("mobile-fab");

        let currentDeletingChapterId = null;
        let chapters = []; // Store book chapters for filtering

        // Mobile menu toggle functionality
        function openSidebar() {
            sidebar.classList.remove("-translate-x-full");
            sidebarOverlay.classList.remove("hidden");
            document.body.classList.add("overflow-hidden");
        }

        function closeSidebar() {
            sidebar.classList.add("-translate-x-full");
            sidebarOverlay.classList.add("hidden");
            document.body.classList.remove("overflow-hidden");
        }

        // Event listeners for sidebar
        if (mobileMenuButton) {
            mobileMenuButton.addEventListener("click", openSidebar);
        }

        if (closeSidebarButton) {
            closeSidebarButton.addEventListener("click", closeSidebar);
        }

        if (sidebarOverlay) {
            sidebarOverlay.addEventListener("click", closeSidebar);
        }

        // Close sidebar when clicking on a menu item on mobile
        const sidebarLinks = sidebar.querySelectorAll("a");
        sidebarLinks.forEach((link) => {
            link.addEventListener("click", () => {
                if (window.innerWidth < 768) {
                    // Only on mobile
                    closeSidebar();
                }
            });
        });

        // Handle resize events - ensure sidebar is visible on desktop
        window.addEventListener("resize", () => {
            if (window.innerWidth >= 768) {
                // md breakpoint
                sidebar.classList.remove("-translate-x-full");
                sidebarOverlay.classList.add("hidden");
                document.body.classList.remove("overflow-hidden");
            } else {
                sidebar.classList.add("-translate-x-full");
            }
        });

        // Optional: Toggle floating action button
        if (mobileFab) {
            mobileFab.addEventListener("click", () => {
                // Scroll to the form section
                const formElement = document.getElementById('chapterForm');
                formElement.scrollIntoView({ behavior: 'smooth' });
                // Focus on the first input
                document.getElementById('author').focus();
            });
        }

        // Fetch Book Chapters
        async function fetchChapters() {
            try {
                const response = await fetch('/chapters');
                chapters = await response.json();
                renderChapters(chapters);
                populateYearFilter(chapters);

                // Update chapter count
                chapterCount.textContent = chapters.length;
            } catch (error) {
                console.error('Error fetching book chapters:', error);
                alert('Failed to fetch book chapters. Please try again.');
            }
        }

        // Populate Year Filter Dropdown
        function populateYearFilter(chaps) {
            const years = [...new Set(chaps.map(chap => chap.year))].sort((a, b) => b - a);
            yearFilter.innerHTML = '<option value="">All Years</option>';
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });
        }

        // Render Book Chapters as Cards
        function renderChapters(chaps) {
            chaptersGrid.innerHTML = chaps.map(chapter => `
                <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:shadow-lg hover:-translate-y-1">
                    <div class="bg-blue-50 px-4 py-2 border-b border-blue-100">
                        <h3 class="font-bold text-lg text-gray-800 line-clamp-2">${escapeHtml(chapter.chapterName)}</h3>
                    </div>
                    <div class="p-4">
                        <p class="text-gray-600 text-sm mb-2 italic line-clamp-1">
                            <i class="fas fa-user-edit text-brand-secondary mr-2"></i>${escapeHtml(chapter.author)}
                        </p>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-gray-500 line-clamp-1">
                                <i class="fas fa-book text-brand-secondary mr-2"></i>${escapeHtml(chapter.bookName)}
                            </span>
                            <span class="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                <i class="fas fa-calendar-alt mr-1"></i>${chapter.year}
                            </span>
                        </div>
                        <div class="flex justify-between items-center mb-3 text-sm">
                            <span class="text-green-600">
                                <i class="fas fa-file-alt mr-1"></i>Pages: ${chapter.Page || 'N/A'}
                            </span>
                            ${chapter.ISBN ? `
                                <span class="text-blue-600">
                                    <i class="fas fa-barcode mr-1"></i>ISBN: ${chapter.ISBN}
                                </span>
                            ` : ''}
                        </div>
                        <div class="mt-4 flex space-x-2">
                            <button 
                                onclick="editChapter('${chapter._id}')"
                                class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300 flex items-center justify-center"
                            >
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                            <button 
                                onclick="confirmDelete('${chapter._id}')"
                                class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300 flex items-center justify-center"
                            >
                                <i class="fas fa-trash-alt mr-1"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Search and Filter Book Chapters
        function searchAndFilterChapters() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const selectedYear = yearFilter.value;

            const filteredChapters = chapters.filter(chap => {
                const matchesSearch = searchTerm === '' ||
                    chap.chapterName.toLowerCase().includes(searchTerm) ||
                    chap.author.toLowerCase().includes(searchTerm) ||
                    chap.bookName.toLowerCase().includes(searchTerm);

                const matchesYear = selectedYear === '' ||
                    chap.year.toString() === selectedYear;

                return matchesSearch && matchesYear;
            });

            renderChapters(filteredChapters);

            // Update filtered count with animation
            const countElement = document.getElementById('chapterCount');
            const currentCount = parseInt(countElement.textContent);
            const targetCount = filteredChapters.length;

            // Simple animation for count change
            let startTime;
            function animateCount(timestamp) {
                if (!startTime) startTime = timestamp;
                const progress = (timestamp - startTime) / 300; // 300ms duration

                if (progress < 1) {
                    const currentValue = Math.floor(currentCount + (targetCount - currentCount) * progress);
                    countElement.textContent = currentValue;
                    requestAnimationFrame(animateCount);
                } else {
                    countElement.textContent = targetCount;
                }
            }

            requestAnimationFrame(animateCount);
        }

        // Attach search event listeners
        searchButton.addEventListener('click', searchAndFilterChapters);
        searchInput.addEventListener('input', searchAndFilterChapters);
        yearFilter.addEventListener('change', searchAndFilterChapters);

        // Escape HTML to prevent XSS
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Validate Form Inputs
        function validateForm() {
            const author = document.getElementById('author').value.trim();
            const chapterName = document.getElementById('chapterName').value.trim();
            const bookName = document.getElementById('bookName').value.trim();
            const year = document.getElementById('year').value;
            const isbn = document.getElementById('isbn').value.trim();

            if (year < 1900 || year > new Date().getFullYear()) {
                alert(`Year must be between 1900 and ${new Date().getFullYear()}`);
                return false;
            }
            
            return true;
        }

        // Add Book Chapter
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!validateForm()) return;

            const chapterData = {
                author: document.getElementById('author').value.trim(),
                chapterName: document.getElementById('chapterName').value.trim(),
                bookName: document.getElementById('bookName').value.trim(),
                year: document.getElementById('year').value,
                ISBN: document.getElementById('isbn').value.trim(),
                Page: document.getElementById('pages').value.trim()
            };

            try {
                const response = await fetch('/chapters', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(chapterData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add book chapter');
                }

                await fetchChapters();
                form.reset();

                // Show success notification
                showNotification('Chapter added successfully!', 'success');
            } catch (error) {
                console.error('Error adding book chapter:', error);
                showNotification(error.message, 'error');
            }
        });

        // Simple notification function
        function showNotification(message, type = 'info') {
            const notificationDiv = document.createElement('div');
            notificationDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${type === 'success' ? 'bg-green-500' :
                    type === 'error' ? 'bg-red-500' : 'bg-blue-500'
                } text-white`;

            notificationDiv.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' :
                    type === 'error' ? 'exclamation-circle' : 'info-circle'
                } mr-2"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notificationDiv);

            setTimeout(() => {
                notificationDiv.classList.add('opacity-0', 'transition-opacity', 'duration-500');
                setTimeout(() => {
                    document.body.removeChild(notificationDiv);
                }, 500);
            }, 3000);
        }

        // Edit Book Chapter
        async function editChapter(id) {
            try {
                const response = await fetch(`/chapters/${id}`);

                if (!response.ok) {
                    throw new Error('Failed to fetch book chapter details');
                }

                const chapter = await response.json();

                document.getElementById('author').value = chapter.author;
                document.getElementById('chapterName').value = chapter.chapterName;
                document.getElementById('bookName').value = chapter.bookName;
                document.getElementById('year').value = chapter.year;
                document.getElementById('isbn').value = chapter.ISBN || '';
                document.getElementById('pages').value = chapter.Page || '';
                document.getElementById('chapterId').value = chapter._id;

                addButton.classList.add('hidden');
                updateButton.classList.remove('hidden');
                cancelEditButton.classList.remove('hidden');

                // Scroll to form
                form.scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                console.error('Error fetching book chapter details:', error);
                showNotification('Failed to load book chapter details', 'error');
            }
        }

        // Cancel Edit
        cancelEditButton.addEventListener('click', () => {
            form.reset();
            addButton.classList.remove('hidden');
            updateButton.classList.add('hidden');
            cancelEditButton.classList.add('hidden');
        });

        // Update Book Chapter
        updateButton.addEventListener('click', async () => {
            if (!validateForm()) return;

            const id = document.getElementById('chapterId').value;
            const chapterData = {
                author: document.getElementById('author').value.trim(),
                chapterName: document.getElementById('chapterName').value.trim(),
                bookName: document.getElementById('bookName').value.trim(),
                year: document.getElementById('year').value,
                ISBN: document.getElementById('isbn').value.trim(),
                Page: document.getElementById('pages').value.trim()
            };

            try {
                const response = await fetch(`/chapters/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(chapterData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update book chapter');
                }

                await fetchChapters();
                form.reset();
                addButton.classList.remove('hidden');
                updateButton.classList.add('hidden');
                cancelEditButton.classList.add('hidden');

                showNotification('Chapter updated successfully!', 'success');
            } catch (error) {
                console.error('Error updating book chapter:', error);
                showNotification(error.message, 'error');
            }
        });

        // Confirm Delete
        function confirmDelete(id) {
            currentDeletingChapterId = id;
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
        }

        // Cancel Delete
        cancelDeleteBtn.addEventListener('click', () => {
            deleteModal.classList.add('hidden');
            deleteModal.classList.remove('flex');
            currentDeletingChapterId = null;
        });

        // Confirm Delete Action
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!currentDeletingChapterId) return;

            try {
                const response = await fetch(`/chapters/${currentDeletingChapterId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete book chapter');
                }

                await fetchChapters();
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                currentDeletingChapterId = null;

                showNotification('Chapter deleted successfully!', 'success');
            } catch (error) {
                console.error('Error deleting book chapter:', error);
                showNotification(error.message, 'error');
            }
        });

        // Initialize the page
        fetchChapters();
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-primary': '#3B82F6',
                        'brand-secondary': '#10B981',
                    }
                }
            }
        }
    </script>
</head>

<body class="bg-gray-100">
    <div class="flex h-screen overflow-hidden relative">
        <!-- Sidebar - hidden on mobile by default -->
        <aside id="sidebar"
            class="w-64 bg-blue-900 text-white shadow-lg transition-all duration-300 ease-in-out z-40 fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 md:relative md:block">
            <div class="p-6 border-b border-blue-800">
                <h2 class="text-xl font-bold tracking-wide">Welcome, admin123!</h2>
                <!-- Close button for mobile -->
                <button id="close-sidebar" class="absolute top-4 right-4 text-white md:hidden">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <nav class="mt-4">
                <ul>
                    <li class="mb-1 px-2">
                        <a href="/admin"
                            class="flex items-center py-3 px-4 bg-blue-700 text-white rounded-md font-medium">
                            <i class="fas fa-home mr-3"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li class="mb-1 px-2">
                        <a href="/admin/control.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-sliders-h mr-3"></i>
                          <span>Visibility Controls</span>
                        </a>
                      </li>
                    </li>
                    <li class="mb-1 px-2">
                        <a href="/admin/files.html"
                          class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-users mr-3"></i>
                          <span>File Upload</span>
                        </a>
                      </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/eResources.html"
                          class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-file-alt mr-3"></i>
                          <span>e-Resources</span>
                        </a>
                      </li>
                       <li class="mb-1 px-2">
            <a href="/admin/latest_news.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-edit mr-3"></i>
              <span>Latest News & Scrolling</span>
            </a>
          </li>
                    <li class="mb-1 px-2">
                        <a href="/admin/formData" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-ticket-alt mr-3"></i>
                          <span>User Requests</span>
                        </a>
                      </li>
                      <li class="mb-1 px-2">
                        <a href="/admin/cvGenerator.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                          <i class="fas fa-file-pdf mr-3"></i>
                          <span>CV Generator</span>
                        </a>
                      </li>
                      <br>
                      <li style="padding-left: 13px; font-size: medium; font-size: 1.1rem;">Account</li>
                    <li class="mb-1 px-2">
                        <a href="/admin/logout"
                            class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                            <i class="fas fa-sign-out-alt mr-3"></i>
                            <span>Logout</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Overlay for mobile sidebar -->
        <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>

        <!-- Main Content -->
        <main class="flex-1 overflow-y-auto md:p-10 pd-3px">
            <div class="p-4 md:p-6">
                <!-- Header with mobile menu indicator -->
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center">
                        <button id="mobile-menu-button" class="mr-3 text-gray-700 md:hidden">
                            <i class="fas fa-bars text-xl"></i>
                        </button>
                        <h1 class="text-2xl md:text-3xl font-bold text-gray-800">Book Management System</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div
                            class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-800 font-semibold">
                            A
                        </div>
                    </div>
                </div>

                <!-- Book Count Card -->
                <div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden mb-6">
                    <div class="bg-blue-800 text-white p-5">
                        <h2 class="text-xl font-semibold flex items-center">
                            <i class="fas fa-book-open mr-3 text-2xl"></i>
                            Book Collection Overview
                        </h2>
                    </div>
                    <div class="p-5 flex flex-wrap">
                        <div class="w-full md:w-1/3 p-3">
                            <div class="bg-blue-50 rounded-lg p-4 text-center shadow-sm">
                                <p class="text-blue-800 text-sm font-medium">TOTAL BOOKS</p>
                                <p id="totalBooks" class="text-3xl font-bold text-blue-900">0</p>
                            </div>
                        </div>
                        <div class="w-full md:w-1/3 p-3">
                            <div class="bg-green-50 rounded-lg p-4 text-center shadow-sm">
                                <p class="text-green-800 text-sm font-medium">UNIQUE AUTHORS</p>
                                <p id="uniqueAuthors" class="text-3xl font-bold text-green-900">0</p>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Book Form -->
            <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
                <h3 class="text-lg font-semibold mb-4 text-gray-800">Add New Book</h3>
                <form id="bookForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input type="hidden" id="bookId">

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="author">Author</label>
                        <input type="text" id="author" name="author" required
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="title">Title</label>
                        <input type="text" id="title" name="title" required
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="year">Year</label>
                        <input type="number" id="year" name="year" required min="1000" max="2025"
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="publisher">Publisher</label>
                        <input type="text" id="publisher" name="publisher" required
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="isbn">ISBN</label>
                        <input type="text" id="isbn" name="isbn" required
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="photo">Photo URL (Optional)</label>
                        <input type="text" id="photo" name="photo"
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-2 text-gray-700" for="link">Book Link (Optional)</label>
                        <input type="url" id="link" name="link" placeholder="https://example.com/book"
                            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                    </div>

                    <div class="col-span-1 md:col-span-2 flex space-x-4">
                        <button type="submit" id="addButton"
                            class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300">
                            <i class="fas fa-plus mr-2"></i> Add Book
                        </button>
                        <button type="button" id="updateButton"
                            class="flex-1 bg-green-500 text-white p-3 rounded hover:bg-green-600 transition duration-300 hidden">
                            <i class="fas fa-save mr-2"></i> Update Book
                        </button>
                        <button type="button" id="cancelEditButton"
                            class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden">
                            <i class="fas fa-times mr-2"></i> Cancel
                        </button>
                    </div>
                </form>
            </div>

            <!-- Books Section Header -->
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-800">Book Collection</h3>
                <div class="flex space-x-2">
                    <div class="relative">
                        <input type="text" id="searchBooks" placeholder="Search books..."
                            class="border border-gray-300 p-2 pl-8 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        <i class="fas fa-search absolute left-2.5 top-3 text-gray-400"></i>
                    </div>
                    <select id="sortBooks"
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                        <option value="title">Sort by Title</option>
                        <option value="author">Sort by Author</option>
                        <option value="year">Sort by Year</option>
                    </select>
                </div>
            </div>

            <!-- Books Grid -->
            <div id="booksGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
                <!-- Books will be dynamically added here -->
            </div>

            <!-- Delete Confirmation Modal -->
            <div id="deleteModal"
                class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
                <div class="bg-white rounded-lg p-6 max-w-sm w-full">
                    <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
                    <p class="mb-6 text-gray-600">Are you sure you want to delete this book?</p>
                    <div class="flex space-x-4">
                        <button id="confirmDeleteBtn"
                            class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300">
                            <i class="fas fa-trash-alt mr-2"></i> Delete
                        </button>
                        <button id="cancelDeleteBtn"
                            class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300">
                            <i class="fas fa-ban mr-2"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
    </div>
    </main>
    </div>

    <!-- Floating action button for mobile -->
    <button id="mobile-fab"
        class="md:hidden fixed bottom-4 right-4 bg-blue-800 text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-30">
        <i class="fas fa-plus"></i>
    </button>

    <script>
        // DOM Elements
        const form = document.getElementById('bookForm');
        const booksGrid = document.getElementById('booksGrid');
        const addButton = document.getElementById('addButton');
        const updateButton = document.getElementById('updateButton');
        const cancelEditButton = document.getElementById('cancelEditButton');
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const totalBooksElement = document.getElementById('totalBooks');
        const uniqueAuthorsElement = document.getElementById('uniqueAuthors');
        const recentAdditionsElement = document.getElementById('recentAdditions');
        const searchBooksInput = document.getElementById('searchBooks');
        const sortBooksSelect = document.getElementById('sortBooks');

        // Mobile navigation elements
        const mobileMenuButton = document.getElementById("mobile-menu-button");
        const closeSidebarButton = document.getElementById("close-sidebar");
        const sidebar = document.getElementById("sidebar");
        const sidebarOverlay = document.getElementById("sidebar-overlay");
        const mobileFab = document.getElementById("mobile-fab");

        let currentDeletingBookId = null;
        let allBooks = [];

        // Fetch Books
        async function fetchBooks() {
            try {
                const response = await fetch('/books');
                const books = await response.json();
                allBooks = books;
                updateStatistics(books);
                renderBooks(books);
            } catch (error) {
                console.error('Error fetching books:', error);
                // For demo purposes - create sample data if API fails
                const sampleBooks = [
                    { _id: '1', title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', year: 1925, publisher: 'Scribner', isbn: '9780743273565', link: 'https://example.com/gatsby' },
                    { _id: '2', title: 'To Kill a Mockingbird', author: 'Harper Lee', year: 1960, publisher: 'J.B. Lippincott & Co.', isbn: '9780061120084', link: 'https://example.com/mockingbird' },
                    { _id: '3', title: '1984', author: 'George Orwell', year: 1949, publisher: 'Secker & Warburg', isbn: '9780451524935', link: 'https://example.com/1984' },
                    { _id: '4', title: 'Pride and Prejudice', author: 'Jane Austen', year: 1813, publisher: 'T. Egerton', isbn: '9780141439518', link: 'https://example.com/pride' },
                    { _id: '5', title: 'The Hobbit', author: 'J.R.R. Tolkien', year: 1937, publisher: 'George Allen & Unwin', isbn: '9780547928227', link: 'https://example.com/hobbit' },
                    { _id: '6', title: 'Harry Potter and the Sorcerer\'s Stone', author: 'J.K. Rowling', year: 1997, publisher: 'Bloomsbury', isbn: '9780590353427', link: 'https://example.com/harry-potter' }
                ];
                allBooks = sampleBooks;
                updateStatistics(sampleBooks);
                renderBooks(sampleBooks);
            }
        }

        // Update Statistics
        function updateStatistics(books) {
            // Total books count
            totalBooksElement.textContent = books.length;

            // Count unique authors
            const uniqueAuthors = new Set(books.map(book => book.author)).size;
            uniqueAuthorsElement.textContent = uniqueAuthors;

        }

        // Render Books as Cards
        function renderBooks(books) {
            booksGrid.innerHTML = books.map(book => `
                <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:shadow-lg hover:-translate-y-1">
                    <div class="p-4">
                        <h3 class="font-bold text-xl mb-2 text-gray-800 truncate">${escapeHtml(book.title)}</h3>
                        <p class="text-gray-600 mb-2">By ${escapeHtml(book.author)}</p>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-gray-500">${book.year}</span>
                            <span class="text-sm text-gray-500">${escapeHtml(book.publisher)}</span>
                            <span class="text-sm text-gray-500">${escapeHtml(book.isbn)}</span>
                        </div>
                        ${book.link ? `
                            <div class="mb-3">
                                <a href="${escapeHtml(book.link)}" target="_blank" rel="noopener noreferrer" 
                                   class="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm">
                                    <i class="fas fa-external-link-alt mr-1"></i>
                                    View Book
                                </a>
                            </div>
                        ` : ''}
                        <div class="mt-4 flex space-x-2">
                            <button 
                                onclick="editBook('${book._id}')"
                                class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300"
                            >
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                            <button 
                                onclick="confirmDelete('${book._id}')"
                                class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300"
                            >
                                <i class="fas fa-trash-alt mr-1"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Escape HTML to prevent XSS - FIXED VERSION
        function escapeHtml(unsafe) {
            // Handle null, undefined, or non-string values
            if (unsafe == null || unsafe === undefined) {
                return '';
            }
            
            // Convert to string if it's not already a string
            const str = String(unsafe);
            
            return str
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Validate Form Inputs
        function validateForm() {
            const author = document.getElementById('author').value.trim();
            const title = document.getElementById('title').value.trim();
            const year = document.getElementById('year').value;
            const publisher = document.getElementById('publisher').value.trim();
            const isbn = document.getElementById('isbn').value.trim();
            const link = document.getElementById('link').value.trim();

            if (year < 1000 || year > new Date().getFullYear()) {
                alert(`Year must be between 1000 and ${new Date().getFullYear()}`);
                return false;
            }

            // Validate URL if provided
            if (link && !isValidURL(link)) {
                alert('Please enter a valid URL for the book link');
                return false;
            }
            
            return true;
        }

        // URL validation helper
        function isValidURL(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        // Add Book
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!validateForm()) return;

            const bookData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                year: document.getElementById('year').value,
                publisher: document.getElementById('publisher').value.trim(),
                isbn: document.getElementById('isbn').value.trim(),
                photo: document.getElementById('photo').value.trim(),
                link: document.getElementById('link').value.trim()
            };

            try {
                const response = await fetch('/books', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add book');
                }

                fetchBooks();
                form.reset();
            } catch (error) {
                console.error('Error adding book:', error);
                // Demo fallback for when API is unavailable
                const newBook = {
                    _id: Date.now().toString(),
                    ...bookData
                };
                allBooks.push(newBook);
                updateStatistics(allBooks);
                renderBooks(allBooks);
                form.reset();
            }
        });

        // Edit Book
        async function editBook(id) {
            try {
                const response = await fetch(`/books/${id}`);

                if (!response.ok) {
                    throw new Error('Failed to fetch book details');
                }

                const book = await response.json();
                populateFormForEdit(book);
            } catch (error) {
                console.error('Error fetching book details:', error);
                // Demo fallback when API is unavailable
                const book = allBooks.find(b => b._id === id);
                if (book) {
                    populateFormForEdit(book);
                } else {
                    alert('Failed to load book details');
                }
            }
        }

        // Populate form for edit
        function populateFormForEdit(book) {
            document.getElementById('author').value = book.author || '';
            document.getElementById('title').value = book.title || '';
            document.getElementById('year').value = book.year || '';
            document.getElementById('publisher').value = book.publisher || '';
            document.getElementById('isbn').value = book.isbn || '';
            document.getElementById('photo').value = book.photo || '';
            document.getElementById('link').value = book.link || '';
            document.getElementById('bookId').value = book._id;

            addButton.classList.add('hidden');
            updateButton.classList.remove('hidden');
            cancelEditButton.classList.remove('hidden');
        }

        // Cancel Edit
        cancelEditButton.addEventListener('click', () => {
            form.reset();
            addButton.classList.remove('hidden');
            updateButton.classList.add('hidden');
            cancelEditButton.classList.add('hidden');
        });

        // Update Book
        updateButton.addEventListener('click', async () => {
            if (!validateForm()) return;

            const id = document.getElementById('bookId').value;
            const bookData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                year: document.getElementById('year').value,
                publisher: document.getElementById('publisher').value.trim(),
                isbn: document.getElementById('isbn').value.trim(),
                photo: document.getElementById('photo').value.trim(),
                link: document.getElementById('link').value.trim()
            };

            try {
                const response = await fetch(`/books/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update book');
                }

                fetchBooks();
                form.reset();
                addButton.classList.remove('hidden');
                updateButton.classList.add('hidden');
                cancelEditButton.classList.add('hidden');
            } catch (error) {
                console.error('Error updating book:', error);
                // Demo fallback when API is unavailable
                const index = allBooks.findIndex(b => b._id === id);
                if (index !== -1) {
                    allBooks[index] = { ...allBooks[index], ...bookData };
                    renderBooks(allBooks);
                    form.reset();
                    addButton.classList.remove('hidden');
                    updateButton.classList.add('hidden');
                    cancelEditButton.classList.add('hidden');
                } else {
                    alert(error.message);
                }
            }
        });

        // Confirm Delete
        function confirmDelete(id) {
            currentDeletingBookId = id;
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
        }

        // Cancel Delete
        cancelDeleteBtn.addEventListener('click', () => {
            deleteModal.classList.add('hidden');
            deleteModal.classList.remove('flex');
            currentDeletingBookId = null;
        });

        // Confirm Delete Action
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!currentDeletingBookId) return;

            try {
                const response = await fetch(`/books/${currentDeletingBookId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete book');
                }

                fetchBooks();
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                currentDeletingBookId = null;
            } catch (error) {
                console.error('Error deleting book:', error);
                // Demo fallback when API is unavailable
                allBooks = allBooks.filter(b => b._id !== currentDeletingBookId);
                updateStatistics(allBooks);
                renderBooks(allBooks);
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                currentDeletingBookId = null;
            }
        });

        // Search functionality
        searchBooksInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredBooks = allBooks.filter(book =>
                (book.title || '').toLowerCase().includes(searchTerm) ||
                (book.author || '').toLowerCase().includes(searchTerm) ||
                (book.publisher || '').toLowerCase().includes(searchTerm) ||
                (book.isbn || '').toLowerCase().includes(searchTerm)
            );
            renderBooks(filteredBooks);
        });

        // Sort functionality
        sortBooksSelect.addEventListener('change', (e) => {
            const sortBy = e.target.value;
            const sortedBooks = [...allBooks].sort((a, b) => {
                if (sortBy === 'year') {
                    return (a.year || 0) - (b.year || 0);
                } else {
                    const aVal = a[sortBy] || '';
                    const bVal = b[sortBy] || '';
                    return aVal.localeCompare(bVal);
                }
            });
            renderBooks(sortedBooks);
        });

        // Mobile menu toggle functionality
        function openSidebar() {
            sidebar.classList.remove("-translate-x-full");
            sidebarOverlay.classList.remove("hidden");
            document.body.classList.add("overflow-hidden");
        }

        function closeSidebar() {
            sidebar.classList.add("-translate-x-full");
            sidebarOverlay.classList.add("hidden");
            document.body.classList.remove("overflow-hidden");
        }

        if (mobileMenuButton) {
            mobileMenuButton.addEventListener("click", openSidebar);
        }

        if (closeSidebarButton) {
            closeSidebarButton.addEventListener("click", closeSidebar);
        }

        if (sidebarOverlay) {
            sidebarOverlay.addEventListener("click", closeSidebar);
        }

        const sidebarLinks = sidebar.querySelectorAll("a");
        sidebarLinks.forEach((link) => {
            link.addEventListener("click", () => {
                if (window.innerWidth < 768) {
                    closeSidebar();
                }
            });
        });

        if (mobileFab) {
            mobileFab.addEventListener("click", () => {
                // Scroll to form on mobile when FAB is clicked
                document.querySelector('#bookForm').scrollIntoView({ behavior: 'smooth' });
            });
        }

        window.addEventListener("resize", () => {
            if (window.innerWidth >= 768) {
                sidebar.classList.remove("-translate-x-full");
                sidebarOverlay.classList.add("hidden");
                document.body.classList.remove("overflow-hidden");
            } else {
                sidebar.classList.add("-translate-x-full");
            }
        });

        // Initial fetch
        fetchBooks();
    </script>
</body>

</html>
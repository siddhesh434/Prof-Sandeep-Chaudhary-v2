<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Research Members Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              "brand-primary": "#3B82F6",
              "brand-secondary": "#10B981",
            },
          },
        },
      };
    </script>
  </head>

  <body class="bg-gray-100">
    <div class="flex h-screen overflow-hidden relative">
      <!-- Sidebar - hidden on mobile by default -->
      <aside
        id="sidebar"
        class="w-64 bg-blue-900 text-white shadow-lg transition-all duration-300 ease-in-out z-40 fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 md:relative md:block"
      >
        <div class="p-6 border-b border-blue-800">
          <h2 class="text-xl font-bold tracking-wide">Welcome, admin 123!</h2>
          <!-- Close button for mobile -->
          <button
            id="close-sidebar"
            class="absolute top-4 right-4 text-white md:hidden"
          >
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
        <nav class="mt-4">
          <ul>
            <li class="mb-1 px-2">
              <a
                href="/admin"
                class="flex items-center py-3 px-4 bg-blue-700 text-white rounded-md font-medium"
              >
                <i class="fas fa-home mr-3"></i>
                <span>Dashboard</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a
                href="/admin/control.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200"
              >
                <i class="fas fa-sliders-h mr-3"></i>
                <span>Visibility Controls</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a
                href="/admin/files.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200"
              >
                <i class="fas fa-users mr-3"></i>
                <span>File Upload</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a href="/admin/eResources.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-file-alt mr-3"></i>
                <span>e-Resources</span>
              </a>
            </li>
             <li class="mb-1 px-2">
            <a href="/admin/latest_news.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-edit mr-3"></i>
              <span>Latest News & Scrolling</span>
            </a>
          </li>
            <li class="mb-1 px-2">
              <a
                href="/admin/formData"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200"
              >
                <i class="fas fa-ticket-alt mr-3"></i>
                <span>User Requests</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a
                href="/admin/cvGenerator.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200"
              >
                <i class="fas fa-file-pdf mr-3"></i>
                <span>CV Generator</span>
              </a>
            </li>
            
            <br>
            <li style="padding-left: 13px; font-size: medium; font-size: 1.1rem;">Account</li>

            <li class="mb-1 px-2">
              <a
                href="/admin/logout"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200"
              >
                <i class="fas fa-sign-out-alt mr-3"></i>
                <span>Logout</span>
              </a>
            </li>
          </ul>
        </nav>
      </aside>

      <!-- Overlay for mobile sidebar -->
      <div
        id="sidebar-overlay"
        class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"
      ></div>

      <!-- Main Content -->
      <main class="flex-1 overflow-y-auto">
        <div class="p-4 md:p-6">
          <!-- Header with mobile menu indicator -->
          <div class="flex justify-between items-center mb-6">
            <div class="flex items-center">
              <button
                id="mobile-menu-button"
                class="mr-3 text-gray-700 md:hidden"
              >
                <i class="fas fa-bars text-xl"></i>
              </button>
              <h1 class="text-xl md:text-2xl font-bold text-gray-800">
                Research Members Management
              </h1>
            </div>
            <div class="flex items-center space-x-4">
              <span class="text-gray-700 text-sm md:text-base hidden sm:inline"
                >Welcome, Admin</span
              >
              <div
                class="w-8 h-8 md:w-10 md:h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-800 font-semibold"
              >
                A
              </div>
            </div>
          </div>

          <!-- Members Count Card -->
          <div
            class="bg-gradient-to-r from-brand-secondary to-blue-700 text-white rounded-lg shadow-md p-4 mb-6"
          >
            <div class="flex items-center justify-between">
              <div>
                <h2 class="text-lg font-semibold">Total Research Members</h2>
                <p class="text-sm opacity-80">
                  Manage all your research group members in one place
                </p>
              </div>
              <div class="text-3xl font-bold flex items-center">
                <span id="memberCount">0</span>
                <i class="fas fa-users ml-3 text-2xl"></i>
              </div>
            </div>
          </div>

          <!-- Research Member Form -->
          <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
            <form id="memberForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input type="hidden" id="memberId" />

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="name">Full Name</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="John Doe"
                />
              </div>

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="position"
                  >Position</label
                >
                <input
                  type="text"
                  id="position"
                  name="position"
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="Junior Research Fellow / Translational Research Fellow"
                />
              </div>

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="scholarLink"
                  >Google Scholar Link</label
                >
                <input
                  type="url"
                  id="scholarLink"
                  name="scholarLink"
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="https://scholar.google.com/..."
                />
              </div>

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="scholarTopic"
                  >Scholar Topic</label
                >
                <input
                  type="text"
                  id="scholarTopic"
                  name="scholarTopic"
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="Biowaste utilization for sustainable concrete / Service life estimation of concrete under corrosion"
                />
              </div>

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="year"> Year</label>
                <input
                  type="text"
                  id="year"
                  name="year"
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="2021 - 2024"
                />
              </div>

              <div class="flex flex-col">
                <label class="mb-2 text-gray-700" for="type">Member Type</label>
                <select
                  id="type"
                  name="type"
                  required
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                >
                  <option value="">All Types</option>
                  <option value="Research Scholar">Research Scholar</option>
                  <option value="Research Alumni">Research Alumni</option>
                  <option value="Research Under-Graduate">
                    Research Under-Graduate
                  </option>
                  <option value="Research Under-Graduates Alumni">
                    Research Under-Graduates Alumni
                  </option>
                  <option value="Research Interns Alumni">
                    Research Interns Alumni
                  </option>
                  <option value="Research Post-Graduates Alumni">
                    Research Post-Graduates Alumni
                  </option>
                </select>
              </div>

              <div class="flex flex-col md:col-span-2">
                <label class="mb-2 text-gray-700" for="photoUrl"
                  >Photo URL</label
                >
                <input
                  type="url"
                  id="photoUrl"
                  name="photoUrl"
                  class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                  placeholder="https://example.com/photo.jpg"
                />
              </div>

              <div class="col-span-1 md:col-span-2 flex space-x-4">
                <button
                  type="submit"
                  id="addButton"
                  class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300"
                >
                  <i class="fas fa-plus mr-2"></i> Add Member
                </button>
                <button
                  type="button"
                  id="updateButton"
                  class="flex-1 bg-yellow-500 text-white p-3 rounded hover:bg-yellow-600 transition duration-300 hidden"
                >
                  <i class="fas fa-edit mr-2"></i> Update Member
                </button>
                <button
                  type="button"
                  id="cancelEditButton"
                  class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden"
                >
                  <i class="fas fa-times mr-2"></i> Cancel
                </button>
              </div>
            </form>
          </div>

          <!-- Search and Filter Section -->
          <div
            class="mb-6 flex flex-wrap gap-4 bg-white p-4 rounded-lg shadow-md"
          >
            <input
              type="text"
              id="searchInput"
              placeholder="Search members..."
              class="flex-grow border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            />
            <select
              id="typeFilter"
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
              <option value="">All Types</option>
              <option value="Research Scholar">Research Scholar</option>
              <option value="Research Alumni">Research Alumni</option>
              <option value="Research Under-Graduate">
                Research Under-Graduate
              </option>
              <option value="Research Under-Graduates Alumni">
                Research Under-Graduates Alumni
              </option>
              <option value="Research Interns Alumni">
                Research Interns Alumni
              </option>
              <option value="Research Post-Graduates Alumni">
                Research Post-Graduates Alumni
              </option>
            </select>
            <button
              id="searchButton"
              class="bg-brand-secondary text-white p-2 rounded hover:bg-blue-700 transition duration-300 flex items-center"
            >
              <i class="fas fa-search mr-2"></i> Search
            </button>
          </div>

          <!-- Research Members Grid -->
          <div
            id="membersGrid"
            class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6"
          >
            <!-- Research members will be dynamically added here -->
          </div>
        </div>
      </main>
    </div>

    <!-- Floating action button for mobile -->
    <button
      id="mobile-fab"
      class="md:hidden fixed bottom-4 right-4 bg-brand-primary text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-30"
    >
      <i class="fas fa-plus"></i>
    </button>

    <!-- Delete Confirmation Modal -->
    <div
      id="deleteModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
    >
      <div class="bg-white rounded-lg p-6 max-w-sm w-full">
        <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
        <p class="mb-6 text-gray-600">
          Are you sure you want to delete this research member?
        </p>
        <div class="flex space-x-4">
          <button
            id="confirmDeleteBtn"
            class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300"
          >
            <i class="fas fa-trash-alt mr-2"></i> Delete
          </button>
          <button
            id="cancelDeleteBtn"
            class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300"
          >
            <i class="fas fa-ban mr-2"></i> Cancel
          </button>
        </div>
      </div>
    </div>

    <script>
      // DOM Elements
      // DOM Elements
      const form = document.getElementById("memberForm");
      const membersGrid = document.getElementById("membersGrid");
      const addButton = document.getElementById("addButton");
      const updateButton = document.getElementById("updateButton");
      const cancelEditButton = document.getElementById("cancelEditButton");
      const deleteModal = document.getElementById("deleteModal");
      const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
      const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
      const searchInput = document.getElementById("searchInput");
      const typeFilter = document.getElementById("typeFilter");
      const searchButton = document.getElementById("searchButton");
      const memberCount = document.getElementById("memberCount");

      // Mobile menu elements
      const mobileMenuButton = document.getElementById("mobile-menu-button");
      const closeSidebarButton = document.getElementById("close-sidebar");
      const sidebar = document.getElementById("sidebar");
      const sidebarOverlay = document.getElementById("sidebar-overlay");
      const mobileFab = document.getElementById("mobile-fab");

      let currentDeletingMemberId = null;
      let members = []; // Store research members for filtering

      // Mobile menu toggle functionality
      function openSidebar() {
        sidebar.classList.remove("-translate-x-full");
        sidebarOverlay.classList.remove("hidden");
        document.body.classList.add("overflow-hidden");
      }

      function closeSidebar() {
        sidebar.classList.add("-translate-x-full");
        sidebarOverlay.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }

      // Event listeners for sidebar
      if (mobileMenuButton) {
        mobileMenuButton.addEventListener("click", openSidebar);
      }

      if (closeSidebarButton) {
        closeSidebarButton.addEventListener("click", closeSidebar);
      }

      if (sidebarOverlay) {
        sidebarOverlay.addEventListener("click", closeSidebar);
      }

      // Close sidebar when clicking on a menu item on mobile
      const sidebarLinks = sidebar.querySelectorAll("a");
      sidebarLinks.forEach((link) => {
        link.addEventListener("click", () => {
          if (window.innerWidth < 768) {
            // Only on mobile
            closeSidebar();
          }
        });
      });

      // Handle resize events - ensure sidebar is visible on desktop
      window.addEventListener("resize", () => {
        if (window.innerWidth >= 768) {
          // md breakpoint
          sidebar.classList.remove("-translate-x-full");
          sidebarOverlay.classList.add("hidden");
          document.body.classList.remove("overflow-hidden");
        } else {
          sidebar.classList.add("-translate-x-full");
        }
      });

      // Optional: Toggle floating action button
      if (mobileFab) {
        mobileFab.addEventListener("click", () => {
          // Scroll to the form section
          const formElement = document.getElementById("memberForm");
          formElement.scrollIntoView({ behavior: "smooth" });
          // Focus on the first input
          document.getElementById("name").focus();
        });
      }

      // Fetch Research Members
      async function fetchMembers() {
        try {
          const response = await fetch("/members");
          members = await response.json();
          renderMembers(members);

          // Update member count
          memberCount.textContent = members.length;
        } catch (error) {
          console.error("Error fetching research members:", error);
          showNotification(
            "Failed to fetch research members. Please try again.",
            "error"
          );
        }
      }

      // Render Research Members as Cards
      function renderMembers(mems) {
        membersGrid.innerHTML = mems
          .map(
            (member) => `
        <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:shadow-lg hover:-translate-y-1">
            <div class="bg-blue-50 px-4 py-2 border-b border-blue-100 flex items-center space-x-3">
                <div class="w-12 h-12 rounded-full overflow-hidden flex-shrink-0">
                    ${
                      member.photoUrl
                        ? `<img src="${escapeHtml(
                            member.photoUrl
                          )}" alt="${escapeHtml(
                            member.name
                          )}" class="w-full h-full object-cover">`
                        : `<div class="w-full h-full bg-blue-200 flex items-center justify-center text-blue-800 font-bold text-xl">
                            ${escapeHtml(member.name.charAt(0))}
                        </div>`
                    }
                </div>
                <h3 class="font-bold text-lg text-gray-800 line-clamp-2 flex-grow">${escapeHtml(
                  member.name
                )}</h3>
            </div>
            <div class="p-4">
                <p class="text-gray-600 text-sm mb-2 flex items-center">
                    <i class="fas fa-user-tie text-brand-secondary mr-2"></i>
                    <span class="line-clamp-1">${escapeHtml(
                      member.position
                    )}</span>
                </p>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-gray-500 line-clamp-1 flex items-center">
                        <i class="fas fa-microscope text-brand-secondary mr-2"></i>
                        ${escapeHtml(member.scholarTopic)}
                    </span>
                </div>
                <div class="flex justify-between items-center mb-3">
                    <span class="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">
                        <i class="fas fa-calendar-alt mr-1"></i>${escapeHtml(
                          member.year
                        )}
                    </span>
                    <span class="text-sm bg-green-100 text-green-800 px-2 py-1 rounded">
                        ${escapeHtml(member.type)}
                    </span>
                </div>
                ${
                  member.scholarLink
                    ? `
                    <a href="${escapeHtml(member.scholarLink)}" target="_blank" 
                       class="text-sm text-blue-600 hover:text-blue-800 flex items-center mb-3">
                        <i class="fas fa-external-link-alt mr-1"></i> Google Scholar Profile
                    </a>
                `
                    : ""
                }
                <div class="mt-4 flex space-x-2">
                    <button 
                        onclick="editMember('${member._id}')"
                        class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300 flex items-center justify-center"
                    >
                        <i class="fas fa-edit mr-1"></i> Edit
                    </button>
                    <button 
                        onclick="confirmDelete('${member._id}')"
                        class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300 flex items-center justify-center"
                    >
                        <i class="fas fa-trash-alt mr-1"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    `
          )
          .join("");
      }

      // Search and Filter Research Members
      function searchAndFilterMembers() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const selectedType = typeFilter.value;

        const filteredMembers = members.filter((mem) => {
          const matchesSearch =
            searchTerm === "" ||
            mem.name.toLowerCase().includes(searchTerm) ||
            mem.position.toLowerCase().includes(searchTerm) ||
            mem.scholarTopic.toLowerCase().includes(searchTerm) ||
            mem.year.toLowerCase().includes(searchTerm); // Now searching in year as well

          const matchesType = selectedType === "" || mem.type === selectedType;

          return matchesSearch && matchesType;
        });

        renderMembers(filteredMembers);

        // Update filtered count with animation
        const countElement = document.getElementById("memberCount");
        const currentCount = parseInt(countElement.textContent);
        const targetCount = filteredMembers.length;

        // Simple animation for count change
        let startTime;
        function animateCount(timestamp) {
          if (!startTime) startTime = timestamp;
          const progress = (timestamp - startTime) / 300; // 300ms duration

          if (progress < 1) {
            const currentValue = Math.floor(
              currentCount + (targetCount - currentCount) * progress
            );
            countElement.textContent = currentValue;
            requestAnimationFrame(animateCount);
          } else {
            countElement.textContent = targetCount;
          }
        }

        requestAnimationFrame(animateCount);
      }

      // Attach search event listeners
      searchButton.addEventListener("click", searchAndFilterMembers);
      searchInput.addEventListener("input", searchAndFilterMembers);
      typeFilter.addEventListener("change", searchAndFilterMembers);

      // Escape HTML to prevent XSS
      function escapeHtml(unsafe) {
        return unsafe
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      // Validate Form Inputs
      function validateForm() {
        const name = document.getElementById("name").value.trim();
        const position = document.getElementById("position").value.trim();
        const scholarTopic = document
          .getElementById("scholarTopic")
          .value.trim();
        const year = document.getElementById("year").value.trim();
        const type = document.getElementById("type").value;

        if (!name || !type) {
          showNotification("Please fill in all required fields", "error");
          return false;
        }

        return true;
      }

      // Add Research Member
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!validateForm()) return;

        const memberData = {
          name: document.getElementById("name").value.trim(),
          position: document.getElementById("position").value.trim(),
          scholarLink: document.getElementById("scholarLink").value.trim(),
          scholarTopic: document.getElementById("scholarTopic").value.trim(),
          year: document.getElementById("year").value.trim(),
          type: document.getElementById("type").value,
          photoUrl: document.getElementById("photoUrl").value.trim(),
        };

        try {
          const response = await fetch("/members", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(memberData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to add research member"
            );
          }

          await fetchMembers();
          form.reset();

          // Show success notification
          showNotification("Member added successfully!", "success");
        } catch (error) {
          console.error("Error adding research member:", error);
          showNotification(error.message, "error");
        }
      });

      // Simple notification function
      function showNotification(message, type = "info") {
        const notificationDiv = document.createElement("div");
        notificationDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
          type === "success"
            ? "bg-green-500"
            : type === "error"
            ? "bg-red-500"
            : "bg-blue-500"
        } text-white`;

        notificationDiv.innerHTML = `
        <div class="flex items-center">
            <i class="fas fa-${
              type === "success"
                ? "check-circle"
                : type === "error"
                ? "exclamation-circle"
                : "info-circle"
            } mr-2"></i>
            <span>${message}</span>
        </div>
    `;

        document.body.appendChild(notificationDiv);

        setTimeout(() => {
          notificationDiv.classList.add(
            "opacity-0",
            "transition-opacity",
            "duration-500"
          );
          setTimeout(() => {
            document.body.removeChild(notificationDiv);
          }, 500);
        }, 3000);
      }

      // Edit Research Member
      async function editMember(id) {
        try {
          const response = await fetch(`/members/${id}`);

          if (!response.ok) {
            throw new Error("Failed to fetch research member details");
          }

          const member = await response.json();

          document.getElementById("name").value = member.name;
          document.getElementById("position").value = member.position;
          document.getElementById("scholarLink").value =
            member.scholarLink || "";
          document.getElementById("scholarTopic").value = member.scholarTopic;
          document.getElementById("year").value = member.year;
          document.getElementById("type").value = member.type;
          document.getElementById("photoUrl").value = member.photoUrl || "";
          document.getElementById("memberId").value = member._id;

          addButton.classList.add("hidden");
          updateButton.classList.remove("hidden");
          cancelEditButton.classList.remove("hidden");

          // Scroll to form
          form.scrollIntoView({ behavior: "smooth" });
        } catch (error) {
          console.error("Error fetching research member details:", error);
          showNotification("Failed to load research member details", "error");
        }
      }

      // Cancel Edit
      cancelEditButton.addEventListener("click", () => {
        form.reset();
        addButton.classList.remove("hidden");
        updateButton.classList.add("hidden");
        cancelEditButton.classList.add("hidden");
      });

      // Update Research Member
      updateButton.addEventListener("click", async () => {
        if (!validateForm()) return;

        const id = document.getElementById("memberId").value;
        const memberData = {
          name: document.getElementById("name").value.trim(),
          position: document.getElementById("position").value.trim(),
          scholarLink: document.getElementById("scholarLink").value.trim(),
          scholarTopic: document.getElementById("scholarTopic").value.trim(),
          year: document.getElementById("year").value,
          type: document.getElementById("type").value,
          photoUrl: document.getElementById("photoUrl").value.trim(),
        };

        try {
          const response = await fetch(`/members/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(memberData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to update research member"
            );
          }

          await fetchMembers();
          form.reset();
          addButton.classList.remove("hidden");
          updateButton.classList.add("hidden");
          cancelEditButton.classList.add("hidden");

          showNotification("Member updated successfully!", "success");
        } catch (error) {
          console.error("Error updating research member:", error);
          showNotification(error.message, "error");
        }
      });

      // Confirm Delete
      function confirmDelete(id) {
        currentDeletingMemberId = id;
        deleteModal.classList.remove("hidden");
        deleteModal.classList.add("flex");
      }

      // Cancel Delete
      cancelDeleteBtn.addEventListener("click", () => {
        deleteModal.classList.add("hidden");
        deleteModal.classList.remove("flex");
        currentDeletingMemberId = null;
      });

      // Confirm Delete Action
      confirmDeleteBtn.addEventListener("click", async () => {
        if (!currentDeletingMemberId) return;

        try {
          const response = await fetch(`/members/${currentDeletingMemberId}`, {
            method: "DELETE",
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to delete research member"
            );
          }

          await fetchMembers();
          deleteModal.classList.add("hidden");
          deleteModal.classList.remove("flex");
          currentDeletingMemberId = null;

          showNotification("Member deleted successfully!", "success");
        } catch (error) {
          console.error("Error deleting research member:", error);
          showNotification(error.message, "error");
        }
      });

      // Close modal if clicked outside of content
      deleteModal.addEventListener("click", (e) => {
        if (e.target === deleteModal) {
          deleteModal.classList.add("hidden");
          deleteModal.classList.remove("flex");
          currentDeletingMemberId = null;
        }
      });

      // Handle keyboard events for modal
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !deleteModal.classList.contains("hidden")) {
          deleteModal.classList.add("hidden");
          deleteModal.classList.remove("flex");
          currentDeletingMemberId = null;
        }
      });

      // Initialize the application
      document.addEventListener("DOMContentLoaded", () => {
        // Fetch members on page load
        fetchMembers();

        // Check for URL params (for potential filtering)
        const urlParams = new URLSearchParams(window.location.search);
        const typeParam = urlParams.get("type");
        const searchParam = urlParams.get("search");

        if (typeParam) {
          typeFilter.value = typeParam;
        }

        if (searchParam) {
          searchInput.value = searchParam;
          // Apply search filter
          setTimeout(() => {
            searchAndFilterMembers();
          }, 500);
        }
      });
    </script>
  </body>
</html>

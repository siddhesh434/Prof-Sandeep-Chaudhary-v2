<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Research Project Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'brand-primary': '#3B82F6',
            'brand-secondary': '#10B981',
          },
        },
      },
    };
  </script>
</head>

<body class="bg-gray-100 min-h-screen">
  <div class="flex h-screen overflow-hidden relative">
    <!-- Sidebar - hidden on mobile by default -->
    <aside id="sidebar"
      class="w-64 bg-blue-900 text-white shadow-lg transition-all duration-300 ease-in-out z-40 fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 md:relative md:block">
      <div class="p-6 border-b border-blue-800">
        <h2 class="text-xl font-bold tracking-wide">
          Welcome, admin123!
        </h2>
        <!-- Close button for mobile -->
        <button id="close-sidebar" class="absolute top-4 right-4 text-white md:hidden">
          <i class="fas fa-times text-xl"></i>
        </button>
      </div>
      <nav class="mt-4">
        <ul>
          <li class="mb-1 px-2">
            <a href="/admin" class="flex items-center py-3 px-4 bg-blue-700 text-white rounded-md font-medium">
              <i class="fas fa-home mr-3"></i>
              <span>Dashboard</span>
            </a>
          </li>
          <li class="mb-1 px-2">
            <a href="/admin/control.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-sliders-h mr-3"></i>
              <span>Visibility Controls</span>
            </a>
          </li>
          <li class="mb-1 px-2">
            <a href="/admin/files.html"
              class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-users mr-3"></i>
              <span>File Upload</span>
            </a>
          </li>
          <li class="mb-1 px-2">
            <a href="/admin/eResources.html"
              class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-file-alt mr-3"></i>
              <span>e-Resources</span>
            </a>
          </li>
           <li class="mb-1 px-2">
            <a href="/admin/latest_news.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-edit mr-3"></i>
              <span>Latest News & Scrolling</span>
            </a>
          </li>
          <li class="mb-1 px-2">
            <a href="/admin/formData" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-ticket-alt mr-3"></i>
              <span>User Requests</span>
            </a>
          </li>
          <li class="mb-1 px-2">
            <a href="/admin/cvGenerator.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-file-pdf mr-3"></i>
              <span>CV Generator</span>
            </a>
          </li>
          <br>
          <li style="padding-left: 13px; font-size: medium; font-size: 1.1rem;">Account</li>

          <li class="mb-1 px-2">
            <a href="/admin/logout"
              class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-sign-out-alt mr-3"></i>
              <span>Logout</span>
            </a>
          </li>
        </ul>
      </nav>
    </aside>

    <!-- Overlay for mobile sidebar -->
    <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>

    <!-- Main Content -->
    <main class="flex-1 overflow-y-auto">
      <div class="p-4 md:p-6">
        <!-- Header with mobile menu indicator -->
        <div class="flex justify-between items-center mb-6">
          <div class="flex items-center">
            <button id="mobile-menu-button" class="mr-3 text-gray-700 md:hidden">
              <i class="fas fa-bars text-xl"></i>
            </button>
            <h1 class="text-xl md:text-2xl font-bold text-gray-800">
              Research Project Management
            </h1>
          </div>
          <div class="flex items-center space-x-2 md:space-x-4">
            <span class="text-gray-700 text-sm md:text-base hidden sm:inline">Welcome, Researcher</span>
            <div
              class="w-8 h-8 md:w-10 md:h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-800 font-semibold">
              R
            </div>
          </div>
        </div>

        <!-- Projects Overview Card -->
        <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6">
          <div class="flex flex-wrap items-center justify-between">
            <div>
              <h2 class="text-lg sm:text-xl font-semibold text-gray-800">Projects Overview</h2>
              <p class="text-gray-600 mt-1">Track and manage your research projects</p>
            </div>
            <div class="flex flex-col items-end mt-2 sm:mt-0">
              <div class="text-3xl font-bold text-brand-primary" id="projectCount">0</div>
              <div class="text-sm text-gray-500">Total Projects</div>
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
            <div class="bg-blue-50 rounded-lg p-4 border border-blue-100">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-500">Sponsored Research</p>
                  <p class="text-xl font-semibold text-blue-600" id="sponsoredCount">0</p>
                </div>
                <div class="bg-blue-100 p-3 rounded-full">
                  <i class="fas fa-flask text-blue-600"></i>
                </div>
              </div>
            </div>
            <div class="bg-green-50 rounded-lg p-4 border border-green-100">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-500">Consultancy</p>
                  <p class="text-xl font-semibold text-green-600" id="consultancyCount">0</p>
                </div>
                <div class="bg-green-100 p-3 rounded-full">
                  <i class="fas fa-handshake text-green-600"></i>
                </div>
              </div>
            </div>
            <div class="bg-purple-50 rounded-lg p-4 border border-purple-100">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-500">Other Projects</p>
                  <p class="text-xl font-semibold text-purple-600" id="otherCount">0</p>
                </div>
                <div class="bg-purple-100 p-3 rounded-full">
                  <i class="fas fa-folder text-purple-600"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Project Form -->
        <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6">
          <h2 class="text-lg font-semibold mb-4 text-gray-800">Add New Research Project</h2>
          <form id="projectForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input type="hidden" id="projectId" />

            <div class="flex flex-col">
              <label class="mb-2 text-gray-700" for="title">Project Title</label>
              <input type="text" id="title" name="title" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary" />
            </div>

            <div class="flex flex-col">
              <label class="mb-2 text-gray-700" for="year">Project Period</label>
              <input type="text" id="year" name="year" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                placeholder="e.g., 2023-2024" />
            </div>

            <div class="flex flex-col">
              <label class="mb-2 text-gray-700" for="funded">Funding Agency</label>
              <input type="text" id="funded" name="funded" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary" />
            </div>

            <div class="flex flex-col">
              <label class="mb-2 text-gray-700" for="collaborator">Collaborating Institution</label>
              <input type="text" id="collaborator" name="collaborator" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary" />
            </div>

            <div class="flex flex-col">
              <label class="mb-2 text-gray-700" for="projectType">Project Type</label>
              <select id="projectType" name="projectType" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                onchange="updateRoleOptions()">
                <option value="">Select Project Type</option>
                <option value="Sponsored Research Project">
                  Sponsored Research Project
                </option>
                <option value="Consultancy Project">Consultancy Project</option>
                <option value="Others">Others</option>
              </select>
            </div>

            <div class="flex flex-col" id="roleContainer">
              <label class="mb-2 text-gray-700" for="role">Your Role</label>
              <select id="role" name="role" required
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
                <option value="">Select Role</option>
              </select>
            </div>

            <div class="col-span-1 md:col-span-2 flex space-x-4">
              <button type="submit" id="addButton"
                class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300">
                <i class="fas fa-plus mr-2"></i> Add Research Project
              </button>
              <button type="button" id="updateButton"
                class="flex-1 bg-blue-500 text-white p-3 rounded hover:bg-blue-600 transition duration-300 hidden">
                <i class="fas fa-save mr-2"></i> Update Project
              </button>
              <button type="button" id="cancelEditButton"
                class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden">
                <i class="fas fa-times mr-2"></i> Cancel
              </button>
            </div>
          </form>
        </div>

        <!-- Search and Filter Section -->
        <div class="mb-6 flex flex-wrap gap-4">
          <input type="text" id="searchInput" placeholder="Search research projects..."
            class="flex-grow border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary" />
          <select id="typeFilter"
            class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary">
            <option value="">All Project Types</option>
            <option value="Sponsored Research Project">
              Sponsored Research Project
            </option>
            <option value="Consultancy Project">Consultancy Project</option>
            <option value="Others">Others</option>
          </select>
          <button id="searchButton"
            class="bg-brand-primary text-white p-2 rounded hover:bg-blue-700 transition duration-300">
            <i class="fas fa-search mr-2"></i> Search
          </button>
        </div>

        <!-- Research Projects Grid -->
        <div id="projectsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
          <!-- Research projects will be dynamically added here -->
        </div>

        <!-- Delete Confirmation Modal -->
        <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
          <div class="bg-white rounded-lg p-6 max-w-sm w-full">
            <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
            <p class="mb-6 text-gray-600">
              Are you sure you want to delete this research project?
            </p>
            <div class="flex space-x-4">
              <button id="confirmDeleteBtn"
                class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300">
                <i class="fas fa-trash-alt mr-2"></i> Delete
              </button>
              <button id="cancelDeleteBtn"
                class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300">
                <i class="fas fa-times mr-2"></i> Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Floating action button for mobile -->
  <button id="mobile-fab"
    class="md:hidden fixed bottom-4 right-4 bg-brand-primary text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-30">
    <i class="fas fa-plus"></i>
  </button>

  <script>
    // DOM Elements
    const form = document.getElementById("projectForm");
    const projectsGrid = document.getElementById("projectsGrid");
    const addButton = document.getElementById("addButton");
    const updateButton = document.getElementById("updateButton");
    const cancelEditButton = document.getElementById("cancelEditButton");
    const deleteModal = document.getElementById("deleteModal");
    const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
    const searchInput = document.getElementById("searchInput");
    const typeFilter = document.getElementById("typeFilter");
    const searchButton = document.getElementById("searchButton");
    const projectTypeSelect = document.getElementById("projectType");
    const roleSelect = document.getElementById("role");
    const projectCount = document.getElementById("projectCount");
    const sponsoredCount = document.getElementById("sponsoredCount");
    const consultancyCount = document.getElementById("consultancyCount");
    const otherCount = document.getElementById("otherCount");

    let currentDeletingProjectId = null;
    let projects = []; // Store projects for filtering

    // Mobile menu toggle functionality
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const closeSidebarButton = document.getElementById("close-sidebar");
    const sidebar = document.getElementById("sidebar");
    const sidebarOverlay = document.getElementById("sidebar-overlay");
    const mobileFab = document.getElementById("mobile-fab");
   
    // Function to open sidebar
    function openSidebar() {
      sidebar.classList.remove("-translate-x-full");
      sidebarOverlay.classList.remove("hidden");
      document.body.classList.add("overflow-hidden");
    }

    // Function to close sidebar
    function closeSidebar() {
      sidebar.classList.add("-translate-x-full");
      sidebarOverlay.classList.add("hidden");
      document.body.classList.remove("overflow-hidden");
    }

    // Event listeners for sidebar
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener("click", openSidebar);
    }

    if (closeSidebarButton) {
      closeSidebarButton.addEventListener("click", closeSidebar);
    }

    if (sidebarOverlay) {
      sidebarOverlay.addEventListener("click", closeSidebar);
    }


    // Add this function after the existing helper functions
function extractEndYear(yearString) {
  if (!yearString) return 0;
  
  // Handle different formats: "2023-2025", "2024", "2020-2022", etc.
  const match = yearString.match(/(\d{4})/g);
  if (match && match.length > 0) {
    // If there are multiple years, take the last one (end year)
    return parseInt(match[match.length - 1]);
  }
  return 0;
}
// Add this function after the extractEndYear function
function sortProjectsByEndYear(projects) {
  return projects.sort((a, b) => {
    const endYearA = extractEndYear(a.year);
    const endYearB = extractEndYear(b.year);
    // Sort in descending order (newest end year first)
    return endYearB - endYearA;
  });
}
    // Optional: Close sidebar when clicking on a menu item on mobile
    const sidebarLinks = sidebar.querySelectorAll("a");
    sidebarLinks.forEach((link) => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 768) {
          // Only on mobile
          closeSidebar();
        }
      });
    });

    // Optional: Toggle floating action button
    if (mobileFab) {
      mobileFab.addEventListener("click", () => {
        // Scroll to form
        const formElement = document.getElementById("projectForm");
        if (formElement) {
          formElement.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }

    // Handle resize events - ensure sidebar is visible on desktop
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768) {
        // md breakpoint
        sidebar.classList.remove("-translate-x-full");
        sidebarOverlay.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      } else {
        sidebar.classList.add("-translate-x-full");
      }
    });

    // Update role options based on project type
    function updateRoleOptions() {
      const projectType = projectTypeSelect.value;

      // Get a fresh reference to the role input container
      const roleContainer = document.getElementById("roleContainer");

      if (projectType === "Sponsored Research Project") {
        // Replace with a select for Sponsored Research Project
        roleContainer.innerHTML = `
            <label class="mb-2 text-gray-700" for="role">Your Role</label>
            <select 
                id="role" 
                name="role" 
                required 
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
                <option value="">Select Role</option>
                <option value="As Principal Investigator">As Principal Investigator</option>
                <option value="As Co-Principal Investigator">As Co-Principal Investigator</option>
                <option value="As Scientist Mentor">As Scientist Mentor</option>
                <option value="As a Guide">As a Guide</option>
            </select>
          `;
      } else {
        // Replace with a text input for other project types
        roleContainer.innerHTML = `
            <label class="mb-2 text-gray-700" for="role">Your Role</label>
            <input 
                type="text" 
                id="role" 
                name="role" 
                required 
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                placeholder="Enter your role"
            >
          `;
      }
    }

    // Update project counts
    function updateProjectCounts() {
      projectCount.textContent = projects.length;

      const sponsored = projects.filter(p => p.projectType === "Sponsored Research Project").length;
      const consultancy = projects.filter(p => p.projectType === "Consultancy Project").length;
      const others = projects.filter(p => p.projectType === "Others").length;

      sponsoredCount.textContent = sponsored;
      consultancyCount.textContent = consultancy;
      otherCount.textContent = others;
    }

    // Fetch Research Projects
    async function fetchProjects() {
      try {
        const response = await fetch("/projects");
        projects = await response.json();
        renderProjects(projects);
        updateProjectCounts();
      } catch (error) {
        console.error("Error fetching projects:", error);
        // For demo purposes, create sample data
        projects = [
          {
            _id: "1",
            title: "Advanced Machine Learning Algorithms for Climate Data",
            year: "2023-2025",
            funded: "National Science Foundation",
            collaborator: "University of Washington",
            projectType: "Sponsored Research Project",
            role: "As Principal Investigator"
          },
          {
            _id: "2",
            title: "Sustainable Urban Development Solutions",
            year: "2022-2024",
            funded: "EPA",
            collaborator: "City Planning Department",
            projectType: "Consultancy Project",
            role: "Lead Consultant"
          },
          {
            _id: "3",
            title: "Renewable Energy Integration in Smart Grids",
            year: "2023-2026",
            funded: "Department of Energy",
            collaborator: "Stanford University",
            projectType: "Sponsored Research Project",
            role: "As Co-Principal Investigator"
          },
        ];
        renderProjects(projects);
        updateProjectCounts();
      }
    }

    // Replace the existing renderProjects function
function renderProjects(projects) {
  const sortedProjects = sortProjectsByEndYear([...projects]); // Create a copy to avoid mutating original
  
  projectsGrid.innerHTML = sortedProjects
    .map(
      (project) => `
            <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:shadow-lg hover:-translate-y-1">
                <div class="p-4">
                    <h3 class="font-bold text-lg mb-2 text-gray-800 line-clamp-2">${escapeHtml(
        project.title
      )}</h3>
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-sm text-gray-500">${escapeHtml(
        project.year
      )}</span>
                        <span class="text-sm ${project.projectType === "Sponsored Research Project"
          ? "text-blue-600"
          : project.projectType === "Consultancy Project"
            ? "text-green-600"
            : "text-purple-600"
        }">${escapeHtml(
          project.projectType
        )}</span>
                    </div>
                    <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Role:</strong> ${escapeHtml(
          project.role
        )}</p>
                    <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Funded by:</strong> ${escapeHtml(
          project.funded
        )}</p>
                    <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Collaborator:</strong> ${escapeHtml(
          project.collaborator
        )}</p>
                    <div class="mt-4 flex space-x-2">
                        <button 
                            onclick="editProject('${project._id}')"
                            class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300"
                        >
                            <i class="fas fa-edit mr-1"></i> Edit
                        </button>
                        <button 
                            onclick="confirmDelete('${project._id}')"
                            class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300"
                        >
                            <i class="fas fa-trash-alt mr-1"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        `
    )
    .join("");
}
 // Replace the existing searchAndFilterProjects function
function searchAndFilterProjects() {
  const searchTerm = searchInput.value.toLowerCase().trim();
  const selectedType = typeFilter.value;

  const filteredProjects = projects.filter((proj) => {
    const matchesSearch =
      searchTerm === "" ||
      proj.title.toLowerCase().includes(searchTerm) ||
      proj.funded.toLowerCase().includes(searchTerm) ||
      proj.collaborator.toLowerCase().includes(searchTerm) ||
      proj.role.toLowerCase().includes(searchTerm);

    const matchesType =
      selectedType === "" || proj.projectType === selectedType;

    return matchesSearch && matchesType;
  });

  renderProjects(filteredProjects); // renderProjects will handle the sorting
}
    // Attach search event listeners
    searchButton.addEventListener("click", searchAndFilterProjects);
    searchInput.addEventListener("input", searchAndFilterProjects);
    typeFilter.addEventListener("change", searchAndFilterProjects);

    // Escape HTML to prevent XSS
    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    // Validate Form Inputs
    function validateForm() {
      const title = document.getElementById("title").value.trim();
      const year = document.getElementById("year").value.trim();
      const funded = document.getElementById("funded").value.trim();
      const collaborator = document
        .getElementById("collaborator")
        .value.trim();
      const projectType = document.getElementById("projectType").value;
      const role = document.getElementById("role").value;

      if (!projectType) {
        alert("Please select a project type");
        return false;
      }

      if (!role) {
        alert("Please specify your role in the project");
        return false;
      }

      return true;
    }

    // Add Research Project
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!validateForm()) return;

      const projectData = {
        title: document.getElementById("title").value.trim(),
        year: document.getElementById("year").value.trim(),
        funded: document.getElementById("funded").value.trim(),
        collaborator: document.getElementById("collaborator").value.trim(),
        projectType: document.getElementById("projectType").value,
        role: document.getElementById("role").value,
      };

      try {
        const response = await fetch("/projects", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(projectData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.message || "Failed to add research project"
          );
        }

        await fetchProjects();
        form.reset();
        // Re-initialize the role select after form reset
        updateRoleOptions();
      } catch (error) {
        console.error("Error adding research project:", error);
        // For demo, just add to our local array
        const newProject = {
          _id: Date.now().toString(),
          ...projectData,
        };
        projects.push(newProject);
        renderProjects(projects);
        updateProjectCounts();
        form.reset();
        updateRoleOptions();
      }
    });

    // Edit Research Project
    window.editProject = function (id) {
      try {
        // For production, fetch from server
        // const response = await fetch(`/projects/${id}`);
        // if (!response.ok) {
        //     throw new Error('Failed to fetch project details');
        // }
        // const project = await response.json();

        // For demo, find in our local array
        const project = projects.find((p) => p._id === id);
        if (!project) {
          throw new Error("Project not found");
        }

        document.getElementById("title").value = project.title;
        document.getElementById("year").value = project.year;
        document.getElementById("funded").value = project.funded;
        document.getElementById("collaborator").value = project.collaborator;
        document.getElementById("projectType").value = project.projectType;

        // Update role options based on project type
        updateRoleOptions();

        // If role select was replaced with input, find it again
        const roleInput = document.getElementById("role");
        if (roleInput) {
          roleInput.value = project.role;
        }

        document.getElementById("projectId").value = project._id;

        addButton.classList.add("hidden");
        updateButton.classList.remove("hidden");
        cancelEditButton.classList.remove("hidden");
      } catch (error) {
        console.error("Error fetching project details:", error);
        alert("Failed to load project details");
      }
    }

    // Cancel Edit
    cancelEditButton.addEventListener("click", () => {
      form.reset();
      updateRoleOptions();
      addButton.classList.remove("hidden");
      updateButton.classList.add("hidden");
      cancelEditButton.classList.add("hidden");
    });

    // Update Research Project
    updateButton.addEventListener("click", async () => {
      if (!validateForm()) return;

      const id = document.getElementById("projectId").value;
      const projectData = {
        title: document.getElementById("title").value.trim(),
        year: document.getElementById("year").value.trim(),
        funded: document.getElementById("funded").value.trim(),
        collaborator: document.getElementById("collaborator").value.trim(),
        projectType: document.getElementById("projectType").value,
        role: document.getElementById("role").value,
      };

      try {
        const response = await fetch(`/projects/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(projectData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.message || "Failed to update research project"
          );
        }

        await fetchProjects();
        form.reset();
        updateRoleOptions();
        addButton.classList.remove("hidden");
        updateButton.classList.add("hidden");
        cancelEditButton.classList.add("hidden");
      } catch (error) {
        console.error("Error updating research project:", error);
        // For demo, update in our local array
        const index = projects.findIndex((p) => p._id === id);
        if (index !== -1) {
          projects[index] = { _id: id, ...projectData };
          renderProjects(projects);
          form.reset();
          updateRoleOptions();
          addButton.classList.remove("hidden");
          updateButton.classList.add("hidden");
          cancelEditButton.classList.add("hidden");
        }
      }
    });

    // Confirm Delete
    function confirmDelete(id) {
      currentDeletingProjectId = id;
      deleteModal.classList.remove("hidden");
      deleteModal.classList.add("flex");
    }

    // Cancel Delete
    cancelDeleteBtn.addEventListener("click", () => {
      deleteModal.classList.add("hidden");
      deleteModal.classList.remove("flex");
      currentDeletingProjectId = null;
    });

    // Confirm Delete Action
    confirmDeleteBtn.addEventListener("click", async () => {
      if (!currentDeletingProjectId) return;

      try {
        const response = await fetch(
          `/projects/${currentDeletingProjectId}`,
          {
            method: "DELETE",
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.message || "Failed to delete research project"
          );
        }

        await fetchProjects();
        deleteModal.classList.add("hidden");
        deleteModal.classList.remove("flex");
        currentDeletingProjectId = null;
      } catch (error) {
        console.error("Error deleting research project:", error);
        // For demo, remove from our local array
        projects = projects.filter((p) => p._id !== currentDeletingProjectId);
        renderProjects(projects);
        deleteModal.classList.add("hidden");
        deleteModal.classList.remove("flex");
        currentDeletingProjectId = null;
      }
    });

    // Initialize role options
    updateRoleOptions();

    // Initial fetch
    fetchProjects();
  </script>
</body>

</html>
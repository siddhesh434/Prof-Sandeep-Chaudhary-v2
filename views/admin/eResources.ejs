<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>eResources Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
  </head>

  <body class="bg-gray-100">
    <div class="flex h-screen overflow-hidden relative">
      <!-- Sidebar - hidden on mobile by default -->
      <aside id="sidebar"
        class="w-64 bg-blue-900 text-white shadow-lg transition-all duration-300 ease-in-out z-40 fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 md:relative md:block">
        <div class="p-6 border-b border-blue-800">
          <h2 class="text-xl font-bold tracking-wide">
            Welcome, admin123!
          </h2>
          <!-- Close button for mobile -->
          <button id="close-sidebar" class="absolute top-4 right-4 text-white md:hidden">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
        <nav class="mt-4">
          <ul>
            <li class="mb-1 px-2">
              <a href="/admin" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-home mr-3"></i>
                <span>Dashboard</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a href="/admin/control.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-sliders-h mr-3"></i>
                <span>Visibility Controls</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a href="/admin/files.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-users mr-3"></i>
                <span>File Upload</span>
              </a>
            </li>
            <li class="mb-1 px-2">
              <a href="/admin/eResources.html"
                class="flex items-center py-3 px-4 bg-blue-700 text-white rounded-md font-medium">
                <i class="fas fa-file-alt mr-3"></i>
                <span>e-Resources</span>
              </a>
            </li>
             <li class="mb-1 px-2">
            <a href="/admin/latest_news.html" class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
              <i class="fas fa-edit mr-3"></i>
              <span>Latest News & Scrolling</span>
            </a>
          </li>
            <li class="mb-1 px-2">
              <a href="/admin/formData"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-ticket-alt mr-3"></i>
                <span>User Requests</span>
              </a>
            </li>

            <li class="mb-1 px-2">
              <a href="/admin/cvGenerator.html"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-file-pdf mr-3"></i>
                <span>CV Generator</span>
              </a>
            </li>
            <br>
            <li style="padding-left: 13px; font-size: medium; font-size: 1.1rem;">Account</li>
            <li class="mb-1 px-2">
              <a href="/admin/logout"
                class="flex items-center py-3 px-4 text-blue-100 hover:bg-blue-800 rounded-md transition-all duration-200">
                <i class="fas fa-sign-out-alt mr-3"></i>
                <span>Logout</span>
              </a>
            </li>
          </ul>
        </nav>
      </aside>

      <!-- Overlay for mobile sidebar -->
      <div
        id="sidebar-overlay"
        class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"
      ></div>

      <!-- Main Content -->
      <main class="flex-1 overflow-y-auto">
        <div class="p-4 md:p-6">
          <!-- Header with mobile menu indicator -->
          <div class="flex justify-between items-center mb-6">
            <div class="flex items-center">
              <button
                id="mobile-menu-button"
                class="mr-3 text-gray-700 md:hidden"
              >
                <i class="fas fa-bars text-xl"></i>
              </button>
              <h1 class="text-2xl font-bold text-gray-800">
                eResources Management
              </h1>
            </div>
            <div class="flex items-center space-x-4">
              <div class="relative">
                <input
                  type="text"
                  id="searchResources"
                  placeholder="Search resources..."
                  class="px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 w-64"
                />
                <button
                  id="searchButton"
                  class="absolute right-2 top-2 text-gray-500 hover:text-blue-500"
                >
                  <i class="fas fa-search"></i>
                </button>
              </div>
              <div
                class="w-10 h-10 bg-blue-700 rounded-full flex items-center justify-center text-white font-semibold"
              >
                A
              </div>
            </div>
          </div>

          <!-- Stats Cards -->
          <div
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6"
          >
            <div
              class="bg-white rounded-lg shadow p-5 border-l-4 border-blue-500"
            >
              <div class="flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold text-gray-700">
                    Total Resources
                  </h3>
                  <p class="text-2xl font-bold" id="totalResources">0</p>
                </div>
                <div class="bg-blue-100 rounded-full p-3 text-blue-500">
                  <i class="fas fa-file-alt text-xl"></i>
                </div>
              </div>
            </div>
            <div
              class="bg-white rounded-lg shadow p-5 border-l-4 border-green-500"
            >
              <div class="flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold text-gray-700">Documents</h3>
                  <p class="text-2xl font-bold" id="totalDocuments">0</p>
                </div>
                <div class="bg-green-100 rounded-full p-3 text-green-500">
                  <i class="fas fa-file-pdf text-xl"></i>
                </div>
              </div>
            </div>
            <div
              class="bg-white rounded-lg shadow p-5 border-l-4 border-purple-500"
            >
              <div class="flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold text-gray-700">Images</h3>
                  <p class="text-2xl font-bold" id="totalImages">0</p>
                </div>
                <div class="bg-purple-100 rounded-full p-3 text-purple-500">
                  <i class="fas fa-images text-xl"></i>
                </div>
              </div>
            </div>
            <div
              class="bg-white rounded-lg shadow p-5 border-l-4 border-yellow-500"
            >
              <div class="flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold text-gray-700">
                    Other Files
                  </h3>
                  <p class="text-2xl font-bold" id="totalOtherFiles">0</p>
                </div>
                <div class="bg-yellow-100 rounded-full p-3 text-yellow-500">
                  <i class="fas fa-file-archive text-xl"></i>
                </div>
              </div>
            </div>
          </div>

          <!-- Upload Form Card -->
          <div
            class="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden mb-6"
          >
            <div class="bg-blue-700 text-white p-4">
              <h2 class="text-lg font-semibold flex items-center">
                <i class="fas fa-upload mr-2 text-xl"></i>
                Upload New eResource
              </h2>
            </div>
            <div class="p-5">
              <form id="uploadForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label
                      for="fileName"
                      class="block text-sm font-medium text-gray-700 mb-1"
                      >Resource Title</label
                    >
                    <input
                      type="text"
                      id="fileName"
                      name="fileName"
                      required
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label
                      for="file"
                      class="block text-sm font-medium text-gray-700 mb-1"
                      >Select File</label
                    >
                    <input
                      type="file"
                      id="file"
                      name="file"
                      required
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                <div>
                  <label
                    for="description"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >Description</label
                  >
                  <textarea
                    id="description"
                    name="description"
                    rows="2"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  ></textarea>
                </div>
                <div>
                  <label
                    for="imageUpload"
                    class="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Thumbnail Image (Optional)
                  </label>
                  <input
                    type="file"
                    id="imageUpload"
                    name="imageUpload"
                    accept="image/*"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <p class="text-xs text-gray-500 mt-1">
                    Upload a thumbnail image for this resource (recommended
                    size: 300x200px)
                  </p>
                </div>
                
                <div class="flex justify-end">
                  <button
                    type="submit"
                    class="bg-blue-700 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors duration-200 flex items-center"
                  >
                    <i class="fas fa-upload mr-2"></i>
                    Upload Resource
                  </button>
                </div>
              </form>
            </div>
          </div>

          
<!-- ADD THIS SEPARATE YOUTUBE FORM AFTER THE UPLOAD FORM CARD -->
<!-- YouTube Video Form Card -->
<div class="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden mb-6">
  <div class="bg-red-600 text-white p-4">
    <h2 class="text-lg font-semibold flex items-center">
      <i class="fab fa-youtube mr-2 text-xl"></i>
      Add YouTube Video
    </h2>
  </div>
  <div class="p-5">
    <form id="youtubeForm" class="space-y-4">
      <div>
        <label for="youtubeTitle" class="block text-sm font-medium text-gray-700 mb-1">
          Video Title
        </label>
        <input
          type="text"
          id="youtubeTitle"
          name="youtubeTitle"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
        />
      </div>
      <div>
        <label for="youtubeUrl" class="block text-sm font-medium text-gray-700 mb-1">
          YouTube Video URL
        </label>
        <input
          type="url"
          id="youtubeUrl"
          name="youtubeUrl"
          required
          placeholder="https://www.youtube.com/watch?v=..."
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
        />
      </div>
      <div>
        <label
          for="youtubeDescription"
          class="block text-sm font-medium text-gray-700 mb-1"
          >Description</label
        >
        <textarea
          id="youtubeDescription"
          name="youtubeDescription"
          rows="3"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
        ></textarea>
      </div>
      <div class="flex justify-end">
        <button
          type="submit"
          class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-500 transition-colors duration-200 flex items-center"
        >
          <i class="fab fa-youtube mr-2"></i>
          Add Video
        </button>
      </div>
    </form>
  </div>
</div>

          <!-- Resource Gallery View -->
          <div
            class="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden mb-6"
          >
            <div
              class="bg-blue-700 text-white p-4 flex justify-between items-center"
            >
              <h2 class="text-lg font-semibold flex items-center">
                <i class="fas fa-th-large mr-2 text-xl"></i>
                Resources Gallery
              </h2>
              <div class="flex items-center space-x-2">
                <button
                  id="gridViewBtn"
                  class="bg-white bg-opacity-20 p-2 rounded hover:bg-opacity-30 active"
                >
                  <i class="fas fa-th-large"></i>
                </button>
                <button
                  id="listViewBtn"
                  class="p-2 rounded hover:bg-opacity-30"
                >
                  <i class="fas fa-list"></i>
                </button>
              </div>
            </div>
            <div class="p-5">
              <!-- Gallery View -->
              <div
                id="galleryView"
                class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
              >
                <!-- Resources will be loaded here -->
              </div>

              <!-- List View (hidden by default) -->
              <div id="listView" class="hidden overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th
                        scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Resource
                      </th>
                      <th
                        scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Type
                      </th>
                      <th
                        scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Size
                      </th>
                      <th
                        scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Upload Date
                      </th>
                      <th
                        scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody
                    id="resourcesList"
                    class="bg-white divide-y divide-gray-200"
                  >
                    <!-- Resources will be loaded here -->
                  </tbody>
                </table>
              </div>

              <!-- Pagination -->
              <div class="flex justify-between items-center mt-6">
                <p class="text-sm text-gray-600">
                  Showing <span id="showingCount">0</span> of
                  <span id="totalCount">0</span> resources
                </p>
                <div class="flex space-x-1">
                  <button
                    id="prevPage"
                    class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50"
                  >
                    <i class="fas fa-chevron-left"></i>
                  </button>
                  <div id="pageNumbers" class="flex space-x-1">
                    <!-- Page numbers will be inserted here -->
                  </div>
                  <button
                    id="nextPage"
                    class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50"
                  >
                    <i class="fas fa-chevron-right"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Resource View Modal -->
    <div
      id="resourceModal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
    >
      <div
        class="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-screen overflow-hidden"
      >
        <div
          class="bg-blue-700 text-white p-4 flex justify-between items-center"
        >
          <h3 class="text-lg font-semibold" id="modalTitle">
            Resource Details
          </h3>
          <button id="closeModal" class="text-white hover:text-gray-200">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
        <div
          class="p-6 overflow-y-auto"
          style="max-height: calc(100vh - 10rem)"
        >
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="md:col-span-1">
              <div
                id="resourcePreview"
                class="bg-gray-100 rounded-lg p-4 flex items-center justify-center h-64"
              >
                <!-- Preview will be shown here -->
              </div>
              <div class="mt-4 space-y-2">
                <button
                  id="downloadResource"
                  class="w-full bg-blue-700 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center"
                >
                  <i class="fas fa-download mr-2"></i> Download
                </button>
                <button
                  id="deleteResource"
                  class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-500 transition-colors flex items-center justify-center"
                >
                  <i class="fas fa-trash-alt mr-2"></i> Delete
                </button>
              </div>
            </div>
            <div class="md:col-span-2">
              <div class="space-y-4">
                <div>
                  <h4 class="text-sm text-gray-500">File Name</h4>
                  <p id="modalFileName" class="text-lg font-semibold">-</p>
                </div>
                <div>
                  <h4 class="text-sm text-gray-500">Description</h4>
                  <p id="modalDescription" class="text-gray-700">-</p>
                </div>
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <h4 class="text-sm text-gray-500">File Type</h4>
                    <p id="modalFileType" class="text-gray-700">-</p>
                  </div>
                  <div>
                    <h4 class="text-sm text-gray-500">File Size</h4>
                    <p id="modalFileSize" class="text-gray-700">-</p>
                  </div>
                  <div>
                    <h4 class="text-sm text-gray-500">Original Filename</h4>
                    <p id="modalOriginalFilename" class="text-gray-700">-</p>
                  </div>
                  <div>
                    <h4 class="text-sm text-gray-500">Upload Date</h4>
                    <p id="modalUploadDate" class="text-gray-700">-</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    

    <!-- Floating action button for mobile -->
    <button
      id="mobile-fab"
      class="md:hidden fixed bottom-4 right-4 bg-blue-700 text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-30"
    >
      <i class="fas fa-plus"></i>
    </button>

    <script>
      // Mobile menu toggle functionality
const mobileMenuButton = document.getElementById("mobile-menu-button");
const closeSidebarButton = document.getElementById("close-sidebar");
const sidebar = document.getElementById("sidebar");
const sidebarOverlay = document.getElementById("sidebar-overlay");
const mobileFab = document.getElementById("mobile-fab");

// Function to open sidebar
function openSidebar() {
  sidebar.classList.remove("-translate-x-full");
  sidebarOverlay.classList.remove("hidden");
  document.body.classList.add("overflow-hidden");
}

// Function to close sidebar
function closeSidebar() {
  sidebar.classList.add("-translate-x-full");
  sidebarOverlay.classList.add("hidden");
  document.body.classList.remove("overflow-hidden");
}

// Event listeners for sidebar
if (mobileMenuButton) {
  mobileMenuButton.addEventListener("click", openSidebar);
}

if (closeSidebarButton) {
  closeSidebarButton.addEventListener("click", closeSidebar);
}

if (sidebarOverlay) {
  sidebarOverlay.addEventListener("click", closeSidebar);
}

// Pagination variables
let currentPage = 1;
let totalPages = 1;
let resourcesPerPage = 12;
let allResources = [];

// View toggle
const gridViewBtn = document.getElementById("gridViewBtn");
const listViewBtn = document.getElementById("listViewBtn");
const galleryView = document.getElementById("galleryView");
const listView = document.getElementById("listView");

gridViewBtn.addEventListener("click", () => {
  galleryView.classList.remove("hidden");
  listView.classList.add("hidden");
  gridViewBtn.classList.add("bg-white", "bg-opacity-20");
  listViewBtn.classList.remove("bg-white", "bg-opacity-20");
});

listViewBtn.addEventListener("click", () => {
  galleryView.classList.add("hidden");
  listView.classList.remove("hidden");
  gridViewBtn.classList.remove("bg-white", "bg-opacity-20");
  listViewBtn.classList.add("bg-white", "bg-opacity-20");
});

// Modal functionality
const resourceModal = document.getElementById("resourceModal");
const closeModal = document.getElementById("closeModal");

closeModal.addEventListener("click", () => {
  resourceModal.classList.add("hidden");
});

// Close modal when clicking outside
resourceModal.addEventListener("click", (e) => {
  if (e.target === resourceModal) {
    resourceModal.classList.add("hidden");
  }
});

// Function to load resources
async function loadResources() {
  try {
    const response = await fetch("/api/eresources");
    allResources = await response.json();

    // Update stats
    document.getElementById("totalResources").textContent = allResources.length;

    const documents = allResources.filter(
      (r) =>
        r.fileType && (
          r.fileType.includes("pdf") ||
          r.fileType.includes("doc") ||
          r.fileType.includes("text") ||
          r.fileType.includes("xls")
        )
    );
    document.getElementById("totalDocuments").textContent = documents.length;

    const images = allResources.filter((r) =>
      r.fileType && r.fileType.includes("image")
    );
    document.getElementById("totalImages").textContent = images.length;

    const youtubeVideos = allResources.filter((r) =>
      r.resourceType === 'youtube'
    );

    document.getElementById("totalOtherFiles").textContent =
      allResources.length - documents.length - images.length;

    // Update pagination
    totalPages = Math.ceil(allResources.length / resourcesPerPage);
    renderPagination();

    // Display resources
    displayResources();
  } catch (error) {
    console.error("Error loading resources:", error);
    showAlert("danger", "Error loading resources");
  }
}

// Function to display resources based on current page
function displayResources() {
  const start = (currentPage - 1) * resourcesPerPage;
  const end = start + resourcesPerPage;
  const paginatedResources = allResources.slice(start, end);

  // Update showing count
  document.getElementById("showingCount").textContent = Math.min(
    end,
    allResources.length
  );
  document.getElementById("totalCount").textContent = allResources.length;

  // Clear existing resources
  const galleryContainer = document.getElementById("galleryView");
  const listContainer = document.getElementById("resourcesList");
  galleryContainer.innerHTML = "";
  listContainer.innerHTML = "";

  if (paginatedResources.length === 0) {
    galleryContainer.innerHTML = `
      <div class="col-span-full text-center py-10">
        <i class="fas fa-folder-open text-gray-300 text-5xl mb-3"></i>
        <p class="text-gray-500">No resources found</p>
      </div>
    `;
    return;
  }

  // Render each resource
  paginatedResources.forEach((resource) => {
    // Determine icon class and background color for this resource
    let iconClass = "fa-file";
    let bgColor = "bg-gray-100";
    let previewHtml;

    // Handle YouTube videos
    if (resource.resourceType === 'youtube') {
      previewHtml = `
        <div class="relative h-40 bg-black rounded-t-lg overflow-hidden">
          <img src="https://img.youtube.com/vi/${resource.youtubeId}/mqdefault.jpg" 
               alt="${resource.fileName}" 
               class="w-full h-full object-cover">
          <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30">
            <i class="fab fa-youtube text-red-600 text-4xl"></i>
          </div>
        </div>
      `;
      iconClass = "fab fa-youtube";
      bgColor = "bg-red-50";
    }
    // Handle regular files with thumbnails
    else if (resource.image) {
      previewHtml = `<img src="${resource.image}" alt="${resource.fileName}" class="w-full h-40 object-cover">`;
    }
    // Handle image files
    else if (resource.fileType && resource.fileType.includes("image")) {
      previewHtml = `<img src="/api/eresources/download/${resource._id}" alt="${resource.fileName}" class="w-full h-40 object-cover">`;
      iconClass = "fa-file-image";
      bgColor = "bg-purple-50";
    }
    // Handle other file types
    else {
      if (resource.fileType && resource.fileType.includes("pdf")) {
        iconClass = "fa-file-pdf";
        bgColor = "bg-red-50";
      } else if (
        resource.fileType && (
          resource.fileType.includes("word") ||
          resource.fileType.includes("doc")
        )
      ) {
        iconClass = "fa-file-word";
        bgColor = "bg-blue-50";
      } else if (
        resource.fileType && (
          resource.fileType.includes("excel") ||
          resource.fileType.includes("spreadsheet")
        )
      ) {
        iconClass = "fa-file-excel";
        bgColor = "bg-green-50";
      } else if (
        resource.fileType && (
          resource.fileType.includes("zip") ||
          resource.fileType.includes("archive")
        )
      ) {
        iconClass = "fa-file-archive";
        bgColor = "bg-yellow-50";
      }

      previewHtml = `
        <div class="${bgColor} flex items-center justify-center h-40">
          <i class="fas ${iconClass} text-5xl text-gray-500"></i>
        </div>
      `;
    }

    // Gallery view item
    const galleryItem = document.createElement("div");
    galleryItem.className =
      "bg-white rounded-lg shadow border border-gray-200 overflow-hidden hover:shadow-md transition-shadow cursor-pointer";

    galleryItem.innerHTML = `
      ${previewHtml}
      <div class="p-4">
        <h3 class="font-semibold text-gray-800 truncate" title="${resource.fileName}">${resource.fileName}</h3>
        <p class="text-sm text-gray-500 mt-1">
          ${resource.resourceType === 'youtube' ? 'YouTube Video' : formatFileSize(resource.size || 0)}
        </p>
        <div class="flex justify-between items-center mt-3">
          <span class="text-xs text-gray-500">${new Date(
            resource.uploadDate
          ).toLocaleDateString()}</span>
          <div class="flex space-x-2">
            <button class="text-blue-600 hover:text-blue-800" onclick="viewResource('${resource._id}')">
              <i class="fas fa-eye"></i>
            </button>
            ${resource.resourceType === 'youtube' ? 
              `<button class="text-green-600 hover:text-green-800" onclick="openYouTubeVideo('${resource.youtubeUrl}')">
                <i class="fas fa-external-link-alt"></i>
              </button>` :
              `<button class="text-green-600 hover:text-green-800" onclick="downloadResource('${resource._id}')">
                <i class="fas fa-download"></i>
              </button>`
            }
            <button class="text-red-600 hover:text-red-800" onclick="deleteResource('${resource._id}')">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>
      </div>
    `;
    galleryContainer.appendChild(galleryItem);

    // List view item
    const listItem = document.createElement("tr");
    listItem.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-10 w-10 flex items-center justify-center">
            <i class="fas ${iconClass} text-2xl ${resource.resourceType === 'youtube' ? 'text-red-600' : 'text-gray-500'}"></i>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900">${resource.fileName}</div>
            <div class="text-sm text-gray-500 truncate" style="max-width: 15rem;">${
              resource.description || "No description"
            }</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
          resource.resourceType === 'youtube' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'
        }">
          ${resource.resourceType === 'youtube' ? 'YouTube' : (resource.fileType ? resource.fileType.split("/")[1] || resource.fileType : 'Unknown')}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${resource.resourceType === 'youtube' ? 'Video' : formatFileSize(resource.size || 0)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${new Date(resource.uploadDate).toLocaleDateString()}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewResource('${resource._id}')">
          <i class="fas fa-eye"></i>
        </button>
        ${resource.resourceType === 'youtube' ? 
          `<button class="text-green-600 hover:text-green-900 mr-3" onclick="openYouTubeVideo('${resource.youtubeUrl}')">
            <i class="fas fa-external-link-alt"></i>
          </button>` :
          `<button class="text-green-600 hover:text-green-900 mr-3" onclick="downloadResource('${resource._id}')">
            <i class="fas fa-download"></i>
          </button>`
        }
        <button class="text-red-600 hover:text-red-900" onclick="deleteResource('${resource._id}')">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    listContainer.appendChild(listItem);
  });
}

// Function to render pagination
function renderPagination() {
  const pageNumbers = document.getElementById("pageNumbers");
  pageNumbers.innerHTML = "";

  // Previous button
  document.getElementById("prevPage").disabled = currentPage === 1;
  document.getElementById("nextPage").disabled = currentPage === totalPages;

  // Calculate page range
  let startPage = Math.max(1, currentPage - 2);
  let endPage = Math.min(totalPages, startPage + 4);

  // Adjust start if we're near the end
  if (endPage - startPage < 4) {
    startPage = Math.max(1, endPage - 4);
  }

  // First page
  if (startPage > 1) {
    const firstPageBtn = document.createElement("button");
    firstPageBtn.className = "px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200";
    firstPageBtn.textContent = "1";
    firstPageBtn.addEventListener("click", () => goToPage(1));
    pageNumbers.appendChild(firstPageBtn);

    if (startPage > 2) {
      const ellipsis = document.createElement("span");
      ellipsis.className = "px-3 py-1";
      ellipsis.textContent = "...";
      pageNumbers.appendChild(ellipsis);
    }
  }

  // Page numbers
  for (let i = startPage; i <= endPage; i++) {
    const pageBtn = document.createElement("button");
    pageBtn.className = `px-3 py-1 rounded-md ${
      i === currentPage
        ? "bg-blue-700 text-white"
        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
    }`;
    pageBtn.textContent = i.toString();
    pageBtn.addEventListener("click", () => goToPage(i));
    pageNumbers.appendChild(pageBtn);
  }

  // Last page
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      const ellipsis = document.createElement("span");
      ellipsis.className = "px-3 py-1";
      ellipsis.textContent = "...";
      pageNumbers.appendChild(ellipsis);
    }

    const lastPageBtn = document.createElement("button");
    lastPageBtn.className = "px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200";
    lastPageBtn.textContent = totalPages.toString();
    lastPageBtn.addEventListener("click", () => goToPage(totalPages));
    pageNumbers.appendChild(lastPageBtn);
  }
}

// Function to change page
function goToPage(page) {
  currentPage = page;
  displayResources();
  renderPagination();
  // Scroll to top of resource section
  document.querySelector(".bg-white.rounded-lg").scrollIntoView({ behavior: "smooth" });
}

// Next and previous page functions
document.getElementById("nextPage").addEventListener("click", () => {
  if (currentPage < totalPages) {
    goToPage(currentPage + 1);
  }
});

document.getElementById("prevPage").addEventListener("click", () => {
  if (currentPage > 1) {
    goToPage(currentPage - 1);
  }
});

// Format file size
function formatFileSize(bytes) {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

// YouTube URL validation and ID extraction
function extractYouTubeId(url) {
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return (match && match[2].length === 11) ? match[2] : null;
}

// Handle YouTube form submission
// Handle YouTube form submission
document.getElementById("youtubeForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  const title = document.getElementById("youtubeTitle").value;
  const url = document.getElementById("youtubeUrl").value;
  const description = document.getElementById("youtubeDescription").value;
  const videoId = extractYouTubeId(url);

  if (!videoId) {
    showAlert("danger", "Please enter a valid YouTube URL");
    return;
  }

  const formData = new FormData();
  formData.append("fileName", title);
  formData.append("resourceType", "youtube");
  formData.append("youtubeUrl", url);
  formData.append("youtubeId", videoId);
  formData.append("description", description);

  try {
    showLoadingIndicator("Adding YouTube video...");

    const response = await fetch("/api/eresources/upload", {
      method: "POST",
      body: formData,
    });

    hideLoadingIndicator();

    const result = await response.json();

    if (result.success) {
      showAlert("success", "YouTube video added successfully");
      e.target.reset();
      loadResources();
    } else {
      showAlert("danger", result.message || "Error adding YouTube video");
    }
  } catch (error) {
    hideLoadingIndicator();
    showAlert("danger", "Error adding YouTube video");
    console.error(error);
  }
});

// Handle file upload
document.getElementById("uploadForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  const formData = new FormData();
  formData.append("file", document.getElementById("file").files[0]);
  formData.append("fileName", document.getElementById("fileName").value);
  formData.append("description", document.getElementById("description").value);

  // Add thumbnail if provided
  if (document.getElementById("imageUpload").files.length > 0) {
    formData.append("image", document.getElementById("imageUpload").files[0]);
  }

  try {
    showLoadingIndicator("Uploading...");

    const response = await fetch("/api/eresources/upload", {
      method: "POST",
      body: formData,
    });

    hideLoadingIndicator();

    const result = await response.json();

    if (result.success) {
      showAlert("success", "Resource uploaded successfully");
      e.target.reset();
      loadResources();
    } else {
      showAlert("danger", result.message || "Error uploading resource");
    }
  } catch (error) {
    hideLoadingIndicator();
    showAlert("danger", "Error uploading resource");
    console.error(error);
  }
});

// View resource details
window.viewResource = async function (resourceId) {
  try {
    showLoadingIndicator("Loading resource...");

    const response = await fetch(`/api/eresources/${resourceId}`);
    const resource = await response.json();

    // Update modal content
    document.getElementById("modalTitle").textContent = resource.fileName;
    document.getElementById("modalFileName").textContent = resource.fileName;
    document.getElementById("modalDescription").textContent =
      resource.description || "No description provided";
    document.getElementById("modalFileType").textContent =
      resource.resourceType === 'youtube' ? 'YouTube Video' : (resource.fileType || 'Unknown');
    document.getElementById("modalFileSize").textContent = 
      resource.resourceType === 'youtube' ? 'Video' : formatFileSize(resource.size || 0);
    document.getElementById("modalOriginalFilename").textContent =
      resource.resourceType === 'youtube' ? resource.youtubeId : (resource.originalFilename || resource.fileName);
    document.getElementById("modalUploadDate").textContent = new Date(
      resource.uploadDate
    ).toLocaleString();

    // Set download and delete buttons
    if (resource.resourceType === 'youtube') {
      document.getElementById("downloadResource").onclick = () =>
        openYouTubeVideo(resource.youtubeUrl);
      document.getElementById("downloadResource").innerHTML =
        '<i class="fas fa-external-link-alt mr-2"></i> Open Video';
    } else {
      document.getElementById("downloadResource").onclick = () =>
        downloadResource(resourceId);
      document.getElementById("downloadResource").innerHTML =
        '<i class="fas fa-download mr-2"></i> Download';
    }

    document.getElementById("deleteResource").onclick = () => {
      resourceModal.classList.add("hidden");
      deleteResource(resourceId);
    };

    // Set preview
    const previewEl = document.getElementById("resourcePreview");

    if (resource.resourceType === 'youtube') {
      // Show YouTube video embedded
      previewEl.innerHTML = `
        <iframe 
          width="100%" 
          height="315" 
          src="https://www.youtube.com/embed/${resource.youtubeId}" 
          title="${resource.fileName}"
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
          allowfullscreen
          class="rounded-lg"
        ></iframe>
      `;
      previewEl.className = "bg-gray-900 rounded-lg p-2 flex items-center justify-center";
    } else if (resource.fileType && resource.fileType.includes("image")) {
      // Show image preview
      previewEl.innerHTML = `<img src="/api/eresources/download/${resourceId}" alt="${resource.fileName}" class="max-w-full max-h-full rounded-lg">`;
      previewEl.className = "bg-gray-100 rounded-lg p-4 flex items-center justify-center h-64";
    } else if (resource.image) {
      // Show custom thumbnail
      previewEl.innerHTML = `<img src="${resource.image}" alt="${resource.fileName}" class="max-w-full max-h-full rounded-lg">`;
      previewEl.className = "bg-gray-100 rounded-lg p-4 flex items-center justify-center h-64";
    } else {
      // Show icon based on file type
      let iconClass = "fa-file";

      if (resource.fileType && resource.fileType.includes("pdf")) {
        iconClass = "fa-file-pdf";
      } else if (
        resource.fileType && (
          resource.fileType.includes("word") ||
          resource.fileType.includes("doc")
        )
      ) {
        iconClass = "fa-file-word";
      } else if (
        resource.fileType && (
          resource.fileType.includes("excel") ||
          resource.fileType.includes("spreadsheet")
        )
      ) {
        iconClass = "fa-file-excel";
      } else if (
        resource.fileType && (
          resource.fileType.includes("zip") ||
          resource.fileType.includes("archive")
        )
      ) {
        iconClass = "fa-file-archive";
      }

      previewEl.innerHTML = `<i class="fas ${iconClass} text-6xl text-gray-400"></i>`;
      previewEl.className = "bg-gray-100 rounded-lg p-4 flex items-center justify-center h-64";
    }

    // Show modal
    resourceModal.classList.remove("hidden");
    hideLoadingIndicator();
  } catch (error) {
    hideLoadingIndicator();
    showAlert("danger", "Error loading resource details");
    console.error(error);
  }
};

// Open YouTube video in new tab
window.openYouTubeVideo = function (youtubeUrl) {
  window.open(youtubeUrl, '_blank');
};

// Download resource
window.downloadResource = function (resourceId) {
  window.location.href = `/api/eresources/download/${resourceId}`;
};

// Delete resource
window.deleteResource = async function (resourceId) {
  if (
    !confirm(
      "Are you sure you want to delete this resource? This action cannot be undone."
    )
  ) {
    return;
  }

  try {
    showLoadingIndicator("Deleting...");

    const response = await fetch(`/api/eresources/${resourceId}`, {
      method: "DELETE",
    });

    hideLoadingIndicator();

    const result = await response.json();

    if (result.success) {
      showAlert("success", "Resource deleted successfully");
      loadResources();
    } else {
      showAlert("danger", result.message || "Error deleting resource");
    }
  } catch (error) {
    hideLoadingIndicator();
    showAlert("danger", "Error deleting resource");
    console.error(error);
  }
};

// Search functionality
document.getElementById("searchButton").addEventListener("click", performSearch);
document.getElementById("searchResources").addEventListener("keypress", (e) => {
  if (e.key === "Enter") {
    performSearch();
  }
});

async function performSearch() {
  const searchTerm = document.getElementById("searchResources").value.trim();

  if (!searchTerm) {
    loadResources();
    return;
  }

  try {
    showLoadingIndicator("Searching...");

    const response = await fetch(
      `/api/eresources/search?q=${encodeURIComponent(searchTerm)}`
    );
    allResources = await response.json();

    // Reset to first page
    currentPage = 1;
    totalPages = Math.ceil(allResources.length / resourcesPerPage);

    hideLoadingIndicator();
    displayResources();
    renderPagination();
  } catch (error) {
    hideLoadingIndicator();
    showAlert("danger", "Error searching resources");
    console.error(error);
  }
}

// Loading indicator
function showLoadingIndicator(message = "Loading...") {
  // Create if it doesn't exist
  if (!document.getElementById("loadingIndicator")) {
    const loadingDiv = document.createElement("div");
    loadingDiv.id = "loadingIndicator";
    loadingDiv.className =
      "fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black bg-opacity-50 z-50";
    loadingDiv.innerHTML = `
      <div class="bg-white p-5 rounded-lg shadow-lg flex flex-col items-center">
        <div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-700 mb-3"></div>
        <p id="loadingMessage" class="text-gray-700"></p>
      </div>
    `;
    document.body.appendChild(loadingDiv);
  }

  document.getElementById("loadingMessage").textContent = message;
  document.getElementById("loadingIndicator").classList.remove("hidden");
}

function hideLoadingIndicator() {
  const loader = document.getElementById("loadingIndicator");
  if (loader) {
    loader.classList.add("hidden");
  }
}

// Show alert message
function showAlert(type, message) {
  const alertDiv = document.createElement("div");
  alertDiv.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg ${
    type === "success" ? "bg-green-500" : "bg-red-500"
  } text-white`;
  alertDiv.innerHTML = `
    <div class="flex items-center">
      <i class="fas ${
        type === "success" ? "fa-check-circle" : "fa-exclamation-circle"
      } mr-2"></i>
      <span>${message}</span>
    </div>
  `;
  document.body.appendChild(alertDiv);
  setTimeout(() => {
    alertDiv.classList.add("opacity-0", "transition-opacity", "duration-300");
    setTimeout(() => alertDiv.remove(), 300);
  }, 5000);
}

// Initialize on page load
document.addEventListener("DOMContentLoaded", () => {
  loadResources();

  // Mobile FAB button functionality
  if (mobileFab) {
    mobileFab.addEventListener("click", () => {
      document.getElementById("uploadForm").scrollIntoView({ behavior: "smooth" });
    });
  }
});

    </script>
  </body>
</html>

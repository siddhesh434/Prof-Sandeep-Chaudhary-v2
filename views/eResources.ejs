<%- include('partials/header') %>

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<!-- Google Fonts -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">

<link rel="stylesheet" href="eResources.css">

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>eResources - Prof. Sandeep Chaudhary</title>

<!-- SEO Meta Tags -->
<meta name="description"
    content="Access eResources from Prof. Sandeep Chaudhary's Sustainable Construction Research Group at IIT Indore. Download research papers, presentations, and educational materials." />
<meta name="keywords"
    content="eResources, Sandeep Chaudhary, IIT Indore, Civil Engineering, Sustainable Construction, Structural Engineering, Research Materials, Educational Resources" />
<meta name="author" content="Prof. Sandeep Chaudhary" />
<meta name="robots" content="index, follow" />
<meta property="og:title"
    content="eResources - Prof. Sandeep Chaudhary's Sustainable Construction Research Group" />
<meta property="og:description"
    content="Access and download research papers, presentations, and educational materials from Prof. Sandeep Chaudhary's Sustainable Construction Research Group at IIT Indore." />
<meta property="og:type" content="website" />
<meta property="og:url" content="http://www.SustainableConstructionLab.com/eResources" />
<meta property="og:image" content="/images/profile.jpg" />
<link rel="canonical" href="http://www.SustainableConstructionLab.com/eResources" />

<style>
    /* Add these styles to your existing CSS */
    .resource-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .resource-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .youtube-thumbnail {
        position: relative;
        cursor: pointer;
        overflow: hidden;
        border-radius: 8px;
    }

    .youtube-thumbnail img {
        width: 100%;
        height: auto;
        transition: transform 0.3s;
    }

    .youtube-thumbnail:hover img {
        transform: scale(1.05);
    }

    .youtube-play-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #5ab9a7a1;
        background-color: rgba(255, 255, 255, 0.9);
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        opacity: 0.9;
        transition: all 0.3s;
    }

    .youtube-thumbnail:hover .youtube-play-button {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
    }

    .youtube-badge {
        background-color: #5ab9a7a1;
        color: white;
    }

    .view-btn {
        background-color: #5ab9a7a1;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .view-btn:hover {
        background-color: #5ab9a7a1;
    }

    .view-count {
        display: flex;
        align-items: center;
        color: #666;
        font-size: 14px;
    }

    @media (max-width: 768px) {
        .filters {
            flex-wrap: wrap;
        }
        
        .filter-btn {
            margin-bottom: 8px;
        }
    }
</style>

<div class="header-section">
    <div class="container1">
        <h1 class="page-title">e-Resources Library</h1>
        <p class="page-description">
            Explore our collection of research papers, presentations, educational materials, and videos from the Sustainable
            Construction Research Group at IIT Indore.
        </p>
    </div>
</div>

<main class="container1 main-container">
    <div class="content-wrapper">
        <div class="search-section">
            <div class="search-container">
                <input type="text" id="resourceSearch" placeholder="Search for resources..."
                    aria-label="Search resources">
                <button id="searchButton" aria-label="Search">
                    <i class="fas fa-search"></i>
                </button>
            </div>

            <div class="filters" id="filters">
                <button class="filter-btn active" data-filter="all">
                    <i class="fas fa-layer-group"></i> All Resources
                </button>
                <button class="filter-btn" data-filter="pdf">
                    <i class="fas fa-file-pdf"></i> PDF Documents
                </button>
                <button class="filter-btn" data-filter="doc">
                    <i class="fas fa-file-word"></i> Word Documents
                </button>
                <button class="filter-btn" data-filter="ppt">
                    <i class="fas fa-file-powerpoint"></i> Presentations
                </button>
                <button class="filter-btn" data-filter="img">
                    <i class="fas fa-image"></i> Images
                </button>
                <button class="filter-btn" data-filter="video">
                    <i class="fab fa-youtube"></i> Videos
                </button>
            </div>
        </div>

        <div id="loading" class="loading">
            <div class="loading-spinner"></div>
            <p>Loading resources...</p>
        </div>

        <div id="resourcesContainer" class="resources-container">
            <!-- Resources will be loaded here dynamically -->
        </div>

        <div id="pagination" class="pagination">
            <!-- Pagination will be added here dynamically -->
        </div>

        <div id="noResources" class="no-resources" style="display: none;">
            <i class="fas fa-search"></i>
            <p>No resources found matching your search criteria.</p>
        </div>
    </div>
</main>

<button class="theme-toggle" style="display: none;" id="themeToggle" aria-label="Toggle theme">
    <i class="fas fa-moon"></i>
</button>

<%- include('partials/footer') %>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Theme toggle functionality
        const themeToggle = document.getElementById('themeToggle');
        const htmlElement = document.documentElement;
        const themeIcon = themeToggle.querySelector('i');

        // Check if user has a saved preference
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            htmlElement.setAttribute('data-theme', savedTheme);
            updateThemeIcon(savedTheme);
        }

        themeToggle.addEventListener('click', function () {
            const currentTheme = htmlElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';

            htmlElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeIcon(newTheme);
        });

        function updateThemeIcon(theme) {
            if (theme === 'light') {
                themeIcon.className = 'fas fa-moon';
            } else {
                themeIcon.className = 'fas fa-sun';
            }
        }

        // Variables for pagination
        let currentPage = 1;
        let resourcesPerPage = 12;
        let allResources = [];
        let filteredResources = [];

        // Get all resources from API
        fetchResources();

        // Filter buttons functionality
        const filterButtons = document.querySelectorAll('.filter-btn');

        filterButtons.forEach(button => {
            button.addEventListener('click', function () {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));

                // Add active class to clicked button
                this.classList.add('active');

                // Apply filter
                const filterValue = this.getAttribute('data-filter');
                filterResources(filterValue);
            });
        });

        // Search functionality
        const searchInput = document.getElementById('resourceSearch');
        const searchButton = document.getElementById('searchButton');

        searchButton.addEventListener('click', function () {
            applySearch();
        });

        searchInput.addEventListener('keyup', function (event) {
            if (event.key === 'Enter') {
                applySearch();
            }
        });

        function applySearch() {
            const searchTerm = searchInput.value.trim().toLowerCase();

            if (searchTerm === '') {
                // If search is empty, reset to current filter
                const activeFilter = document.querySelector('.filter-btn.active').getAttribute('data-filter');
                filterResources(activeFilter);
                return;
            }

            // Filter resources based on search term
            filteredResources = allResources.filter(resource => {
                return resource.fileName.toLowerCase().includes(searchTerm) ||
                    (resource.description && resource.description.toLowerCase().includes(searchTerm)) ||
                    (resource.originalFilename && resource.originalFilename.toLowerCase().includes(searchTerm)) ||
                    (resource.resourceType === 'youtube' && resource.youtubeId.toLowerCase().includes(searchTerm));
            });

            currentPage = 1;
            renderResources();
        }

        // Fetch resources from the API
        function fetchResources() {
            const loadingElement = document.getElementById('loading');
            loadingElement.style.display = 'flex';

            fetch('/api/eresources')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    allResources = data;
                    filteredResources = [...allResources];
                    renderResources();
                    loadingElement.style.display = 'none';
                })
                .catch(error => {
                    console.error('Error fetching resources:', error);
                    loadingElement.style.display = 'none';
                    document.getElementById('noResources').style.display = 'flex';
                    document.getElementById('noResources').innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                <p>Error loading resources. Please try again later.</p>
            `;
                });
        }

        // Filter resources based on file type
        function filterResources(filter) {
            if (filter === 'all') {
                filteredResources = [...allResources];
            } else {
                filteredResources = allResources.filter(resource => {
                    if (resource.resourceType === 'youtube') {
                        return filter === 'video';
                    }

                    const fileType = resource.fileType ? resource.fileType.toLowerCase() : '';

                    switch (filter) {
                        case 'pdf':
                            return fileType.includes('pdf');
                        case 'doc':
                            return fileType.includes('doc') || fileType.includes('word');
                        case 'ppt':
                            return fileType.includes('presentation') || fileType.includes('powerpoint') || fileType.includes('ppt');
                        case 'img':
                            return fileType.includes('image') || fileType.includes('jpeg') || fileType.includes('png') || fileType.includes('gif');
                        case 'video':
                            return false; // YouTube videos are handled above
                        default:
                            return true;
                    }
                });
            }

            // Reset to first page when filtering
            currentPage = 1;
            renderResources();
        }

        // Render resources based on current filters and pagination
        function renderResources() {
            const resourcesContainer = document.getElementById('resourcesContainer');
            const noResourcesElement = document.getElementById('noResources');
            const paginationElement = document.getElementById('pagination');

            // Check if there are any resources to display
            if (filteredResources.length === 0) {
                resourcesContainer.innerHTML = '';
                noResourcesElement.style.display = 'flex';
                paginationElement.innerHTML = '';
                return;
            }

            noResourcesElement.style.display = 'none';

            // Calculate pagination
            const totalPages = Math.ceil(filteredResources.length / resourcesPerPage);
            const startIndex = (currentPage - 1) * resourcesPerPage;
            const endIndex = Math.min(startIndex + resourcesPerPage, filteredResources.length);
            const currentResources = filteredResources.slice(startIndex, endIndex);

            // Generate HTML for resources
            resourcesContainer.innerHTML = '';

            currentResources.forEach((resource, index) => {
                const card = document.createElement('div');
                card.className = 'resource-card';
                card.style.animationDelay = `${index * 0.05}s`;

                // Handle YouTube videos differently
                if (resource.resourceType === 'youtube') {
                    card.classList.add('youtube-resource');
                    renderYouTubeResource(card, resource);
                    resourcesContainer.appendChild(card);
                    return;
                }

                // Determine file type icon for regular files
                const fileType = resource.fileType ? resource.fileType.toLowerCase() : '';
                let iconClass = 'fas fa-file';
                let fileTypeName = 'Document';

                if (fileType.includes('pdf')) {
                    iconClass = 'fas fa-file-pdf';
                    fileTypeName = 'PDF';
                } else if (fileType.includes('word') || fileType.includes('doc')) {
                    iconClass = 'fas fa-file-word';
                    fileTypeName = 'Word Document';
                } else if (fileType.includes('presentation') || fileType.includes('powerpoint') || fileType.includes('ppt')) {
                    iconClass = 'fas fa-file-powerpoint';
                    fileTypeName = 'Presentation';
                } else if (fileType.includes('excel') || fileType.includes('sheet') || fileType.includes('xls')) {
                    iconClass = 'fas fa-file-excel';
                    fileTypeName = 'Spreadsheet';
                } else if (fileType.includes('image') || fileType.includes('jpeg') || fileType.includes('png') || fileType.includes('gif')) {
                    iconClass = 'fas fa-image';
                    fileTypeName = 'Image';
                } else if (fileType.includes('zip') || fileType.includes('rar') || fileType.includes('tar') || fileType.includes('gz')) {
                    iconClass = 'fas fa-file-archive';
                    fileTypeName = 'Archive';
                }

                // Format file size
                const formattedSize = formatFileSize(resource.size || 0);

                // Format date
                const formattedDate = new Date(resource.uploadDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });

                card.innerHTML = `
            <div class="resource-thumbnail">
                ${resource.image
                        ? `<img src="${resource.image}" alt="${resource.fileName}">`
                        : `<div class="resource-icon-container"><i class="${iconClass} resource-icon"></i></div>`
                    }
            </div>
            <div class="resource-content">
                <h3 class="resource-title">${resource.fileName}</h3>
                <div class="file-type-badge">
                    <i class="${iconClass}"></i> ${fileTypeName}
                </div>
                <p class="resource-description">${resource.description || 'No description available.'}</p>
                <div class="resource-meta">
                    <div class="meta-item">
                        <i class="fas fa-file"></i>
                        <span>${resource.originalFilename || resource.fileName}</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-weight-hanging"></i>
                        <span>${formattedSize}</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-calendar-alt"></i>
                        <span>${formattedDate}</span>
                    </div>
                </div>
                <div class="resource-actions">
                    <button class="download-btn" data-id="${resource._id}">
                        <i class="fas fa-download"></i> Download
                    </button>
                    <div class="download-count">
                        <i class="fas fa-cloud-download-alt"></i> ${resource.downloadCount || 0}
                    </div>
                </div>
            </div>
        `;

                resourcesContainer.appendChild(card);

                // Add event listener to download button
                const downloadBtn = card.querySelector('.download-btn');
                downloadBtn.addEventListener('click', function () {
                    const resourceId = this.getAttribute('data-id');
                    downloadResource(resourceId);
                });
            });

            // Generate pagination
            generatePagination(totalPages);
        }

        // Render YouTube video resource
        function renderYouTubeResource(card, resource) {
            const formattedDate = new Date(resource.uploadDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });

            card.innerHTML = `
        <div class="resource-thumbnail youtube-thumbnail" data-video-id="${resource.youtubeId}">
            <img src="https://img.youtube.com/vi/${resource.youtubeId}/mqdefault.jpg" alt="${resource.fileName}">
            <div class="youtube-play-button">
                <i class="fab fa-youtube"></i>
            </div>
        </div>
        <div class="resource-content">
            <h3 class="resource-title">${resource.fileName}</h3>
            <div class="file-type-badge youtube-badge">
                <i class="fab fa-youtube"></i> YouTube Video
            </div>
            <p class="resource-description">${resource.description || 'No description available.'}</p>
            <div class="resource-meta">
                
                <div class="meta-item">
                    <i class="fas fa-calendar-alt"></i>
                    <span>${formattedDate}</span>
                </div>
            </div>
            <div class="resource-actions">
                <button class="view-btn" data-video-id="${resource.youtubeId}">
                    <i class="fas fa-play"></i> Watch Video
                </button>
                <div class="view-count">
                    <i class="fas fa-eye"></i> ${resource.viewCount || 0}
                </div>
            </div>
        </div>
    `;

            // Add event listener to watch button
            const watchBtn = card.querySelector('.view-btn');
            watchBtn.addEventListener('click', function () {
                const videoId = this.getAttribute('data-video-id');
                openYouTubeVideo(videoId);
            });

            // Also make the thumbnail clickable
            const thumbnail = card.querySelector('.youtube-thumbnail');
            thumbnail.addEventListener('click', function () {
                const videoId = this.getAttribute('data-video-id');
                openYouTubeVideo(videoId);
            });
        }

        // Open YouTube video in lightbox
        function openYouTubeVideo(videoId) {
            // Create lightbox overlay
            const lightbox = document.createElement('div');
            lightbox.className = 'youtube-lightbox';
            lightbox.style.position = 'fixed';
            lightbox.style.top = '0';
            lightbox.style.left = '0';
            lightbox.style.width = '100%';
            lightbox.style.height = '100%';
            lightbox.style.backgroundColor = 'rgba(0,0,0,0.9)';
            lightbox.style.zIndex = '1000';
            lightbox.style.display = 'flex';
            lightbox.style.justifyContent = 'center';
            lightbox.style.alignItems = 'center';
            lightbox.style.cursor = 'pointer';

            // Create video container
            const videoContainer = document.createElement('div');
            videoContainer.style.width = '90%';
            videoContainer.style.maxWidth = '900px';
            videoContainer.style.position = 'relative';

            // Add close button
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '<i class="fas fa-times"></i>';
            closeBtn.style.position = 'absolute';
            closeBtn.style.top = '-40px';
            closeBtn.style.right = '0';
            closeBtn.style.color = 'white';
            closeBtn.style.fontSize = '24px';
            closeBtn.style.background = 'none';
            closeBtn.style.border = 'none';
            closeBtn.style.cursor = 'pointer';

            // Add iframe
            const iframe = document.createElement('iframe');
            iframe.width = '100%';
            iframe.height = '500px';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
            iframe.frameBorder = '0';
            iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
            iframe.allowFullscreen = true;
            iframe.style.borderRadius = '8px';

            // Assemble elements
            videoContainer.appendChild(closeBtn);
            videoContainer.appendChild(iframe);
            lightbox.appendChild(videoContainer);
            document.body.appendChild(lightbox);

            // Close functionality
            closeBtn.addEventListener('click', () => {
                document.body.removeChild(lightbox);
            });

            lightbox.addEventListener('click', (e) => {
                if (e.target === lightbox) {
                    document.body.removeChild(lightbox);
                }
            });
        }

        // Generate pagination controls
        function generatePagination(totalPages) {
            const paginationElement = document.getElementById('pagination');

            if (totalPages <= 1) {
                paginationElement.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            paginationHTML += `
            <button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                <i class="fas fa-chevron-left"></i>
            </button>
        `;

            // Page numbers
            const maxDisplayedPages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxDisplayedPages / 2));
            let endPage = Math.min(totalPages, startPage + maxDisplayedPages - 1);

            if (endPage - startPage + 1 < maxDisplayedPages) {
                startPage = Math.max(1, endPage - maxDisplayedPages + 1);
            }

            if (startPage > 1) {
                paginationHTML += `<button onclick="changePage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHTML += `<button disabled>...</button>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                <button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                    ${i}
                </button>
            `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<button disabled>...</button>`;
                }
                paginationHTML += `<button onclick="changePage(${totalPages})">${totalPages}</button>`;
            }

            // Next button
            paginationHTML += `
            <button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                <i class="fas fa-chevron-right"></i>
            </button>
        `;

            paginationElement.innerHTML = paginationHTML;

            // Add event listeners to pagination buttons
            window.changePage = function (page) {
                currentPage = page;
                renderResources();
                // Scroll to top of resources container with smooth animation
                document.getElementById('resourcesContainer').scrollIntoView({ behavior: 'smooth' });
            };
        }

        // Download resource
        function downloadResource(id) {
            window.location.href = `/api/eresources/download/${id}`;
        }

        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';

            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));

            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
    });
</script>

